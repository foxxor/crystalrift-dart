// Generated by dart2js, the Dart to JavaScript compiler version: 1.24.2.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        if (!supportsDirectProtoAccess)
          return;
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }],
      "%": "CanvasGradient|CanvasPattern|Client|DOMError|FileError|MediaError|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|TextMetrics|WebGLRenderingContext|WindowClient"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      }
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }],
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        return dartClosure == null ? this.super$JavaScriptObject$toString(receiver) : J.toString$0$(dartClosure);
      },
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      }
    },
    JSArray: {
      "^": "Interceptor;$ti",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      insert$2: function(receiver, index, value) {
        var t1;
        this.checkGrowable$1(receiver, "insert");
        t1 = receiver.length;
        if (index > t1)
          throw H.wrapException(P.RangeError$value(index, null, null));
        receiver.splice(index, 0, value);
      },
      remove$1: function(receiver, element) {
        var i;
        this.checkGrowable$1(receiver, "remove");
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      map$1: function(receiver, f) {
        return new H.MappedListIterable(receiver, f, [H.getTypeArgumentByIndex(receiver, 0), null]);
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, i, t1;
        this.checkMutable$1(receiver, "setRange");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount + $length > iterable.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i) {
            t1 = skipCount + i;
            if (t1 >= iterable.length)
              return H.ioore(iterable, t1);
            receiver[start + i] = iterable[t1];
          }
        else
          for (i = 0; i < $length; ++i) {
            t1 = skipCount + i;
            if (t1 >= iterable.length)
              return H.ioore(iterable, t1);
            receiver[start + i] = iterable[t1];
          }
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, null);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        this.checkMutable$1(receiver, "indexed set");
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isList: 1,
      $asList: null,
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: null
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,_index,__interceptors$_current",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this._index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this._index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      abs$0: function(receiver) {
        return Math.abs(receiver);
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".toInt()"));
      },
      ceil$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647) {
            truncated = receiver | 0;
            return receiver === truncated ? truncated : truncated + 1;
          }
        } else if (receiver >= -2147483648)
          return receiver | 0;
        d = Math.ceil(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".ceil()"));
      },
      floor$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647)
            return receiver | 0;
        } else if (receiver >= -2147483648) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated - 1;
        }
        d = Math.floor(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".floor()"));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".round()"));
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(new P.UnsupportedError("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $isnum: 1,
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      $isnum: 1
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      _codeUnitAt$1: function(receiver, index) {
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      split$1: function(receiver, pattern) {
        var t1 = receiver.split(pattern);
        return t1;
      },
      substring$2: function(receiver, startIndex, endIndex) {
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H.argumentErrorValue(endIndex));
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (typeof endIndex !== "number")
          return H.iae(endIndex);
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this._codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (typeof times !== "number")
          return H.iae(times);
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      contains$2: function(receiver, other, startIndex) {
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    EfficientLengthIterable: {
      "^": "Iterable;$ti",
      $asEfficientLengthIterable: null
    },
    ListIterable: {
      "^": "EfficientLengthIterable;$ti",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, null);
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      map$1: function(_, f) {
        return new H.MappedListIterable(this, f, [H.getRuntimeTypeArgument(this, "ListIterable", 0), null]);
      },
      toList$1$growable: function(_, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        for (i = 0; i < this.get$length(this); ++i) {
          t1 = this.elementAt$1(0, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      }
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,__internal$_index,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this.__internal$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this.__internal$_index;
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this.__internal$_index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f, this.$ti);
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._iterable, index));
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          if (!!J.getInterceptor(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
          return new H.MappedIterable(iterable, $function, [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f,$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f,$ti",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f.call$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._source, index));
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    FixedLengthListMixin: {
      "^": "Object;$ti"
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1.args = args;
      if (args == null) {
        args = [];
        t1.args = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      init.globalState = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2 = init.globalState;
      t3 = self.window == null;
      t4 = self.Worker;
      t5 = t3 && !!self.postMessage;
      t2.isWorker = t5;
      t5 = !t5;
      if (t5)
        t4 = t4 != null && $.$get$IsolateNatives_thisScript() != null;
      else
        t4 = true;
      t2.supportsWorkers = t4;
      t2.fromCommandLine = t3 && t5;
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t3 = P.int;
      t2.isolates = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, H._IsolateContext]);
      t2.managers = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, null]);
      if (t2.isWorker === true) {
        t4 = new H._MainManagerStub();
        t2.mainManager = t4;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t4);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
      if (init.globalState.isWorker === true)
        return;
      t2 = init.globalState.nextIsolateId++;
      t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, t3);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, H.RawReceivePortImpl]), t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      if (H.functionTypeTest(entry, {func: 1, args: [,]}))
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else if (H.functionTypeTest(entry, {func: 1, args: [,,]}))
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
      init.globalState.topEventLoop.run$0();
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker === true)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError('Cannot extract URI from "' + stack + '"'));
    },
    IsolateNatives__processWorkerMessage: function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = P.int;
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t2, H.RawReceivePortImpl]), t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker === true) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    },
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          t1 = P.Exception_Exception(trace);
          throw H.wrapException(t1);
        }
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused === true) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:0;_box_0,entry",
      call$0: function() {
        this.entry.call$1(this._box_0.args);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:0;_box_0,entry",
      call$0: function() {
        this.entry.call$2(this._box_0.args, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      static: {
        _Manager__serializePrintMessage: function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.int)).serialize$1(t1);
        }
      }
    },
    _IsolateContext: {
      "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized,isPaused,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, t2, $event, t3, t4, t5;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
            if (0 >= t2)
              return H.ioore(t1, -1);
            $event = t1.pop();
            t2 = init.globalState.topEventLoop.events;
            t3 = t2._head;
            t4 = t2._table;
            t5 = t4.length;
            t3 = (t3 - 1 & t5 - 1) >>> 0;
            t2._head = t3;
            if (t3 < 0 || t3 >= t5)
              return H.ioore(t4, t3);
            t4[t3] = $event;
            if (t3 === t2._tail)
              t2._grow$0();
            ++t2._modificationCount;
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 1;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1 = J.getInterceptor(pingType);
        if (!t1.$eq(pingType, 0))
          t1 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          J.send$1$x(responsePort, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        t1 = J.getInterceptor(priority);
        if (!t1.$eq(priority, 0))
          t1 = t1.$eq(priority, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(this.get$kill());
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message, t2;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal === true && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = new Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : J.toString$0$(stackTrace);
        for (t2 = new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), t2._collection$_cell = t1._collection$_first; t2.moveNext$0();)
          J.send$1$x(t2._collection$_current, message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal === true) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i, responsePort, t3;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current()._close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, t2 = t1.length, i < t2; i += 2) {
            responsePort = t1[i];
            t3 = i + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            J.send$1$x(responsePort, t1[t3]);
          }
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 2]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:2;responsePort,response",
      call$0: function() {
        J.send$1$x(this.responsePort, this.response);
      }
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(init.globalState.rootContext.id))
              if (init.globalState.fromCommandLine === true) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker === true) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0, [null, P.int])).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function() {
        var e, trace, exception, t1, t2;
        if (init.globalState.isWorker !== true)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            e = H.unwrapException(exception);
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:2;$this",
      call$0: function() {
        if (!this.$this.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.isPaused) {
          t1.delayedEvents.push(this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:0;entryPoint,args,message,isSpawnUri,startPaused,replyTo",
      call$0: function() {
        H.IsolateNatives__startIsolate(this.entryPoint, this.args, this.message, this.isSpawnUri, this.startPaused, this.replyTo);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:2;topLevel,args,message,isSpawnUri,context",
      call$0: function() {
        var t1, t2;
        t1 = this.context;
        t1.initialized = true;
        if (this.isSpawnUri !== true)
          this.topLevel.call$1(this.message);
        else {
          t2 = this.topLevel;
          if (H.functionTypeTest(t2, {func: 1, args: [,,]}))
            t2.call$2(this.args, this.message);
          else if (H.functionTypeTest(t2, {func: 1, args: [,]}))
            t2.call$1(this.args);
          else
            t2.call$0();
        }
        t1._updateGlobalState$0();
      }
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1.get$_isClosed())
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          t1 = J.getInterceptor$asx(msg);
          switch (t1.$index(msg, 0)) {
            case "pause":
              isolate.addPause$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "resume":
              isolate.removePause$1(t1.$index(msg, 1));
              break;
            case "add-ondone":
              isolate.addDoneListener$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "remove-ondone":
              isolate.removeDoneListener$1(t1.$index(msg, 1));
              break;
            case "set-errors-fatal":
              isolate.setErrorsFatal$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "ping":
              isolate.handlePing$3(t1.$index(msg, 1), t1.$index(msg, 2), t1.$index(msg, 3));
              break;
            case "kill":
              isolate.handleKill$2(t1.$index(msg, 1), t1.$index(msg, 2));
              break;
            case "getErrors":
              t1 = t1.$index(msg, 1);
              isolate.errorPorts.add$1(0, t1);
              break;
            case "stopErrors":
              t1 = t1.$index(msg, 1);
              isolate.errorPorts.remove$1(0, t1);
              break;
          }
          return;
        }
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), "receive"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._NativeJsSendPort && J.$eq$(this._receivePort, other._receivePort);
      },
      get$hashCode: function(_) {
        return this._receivePort.get$_id();
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:0;$this,msg",
      call$0: function() {
        var t1 = this.$this._receivePort;
        if (!t1.get$_isClosed())
          t1.__isolate_helper$_add$1(this.msg);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.int)).serialize$1(t1);
        if (init.globalState.isWorker === true) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._WorkerSendPort && J.$eq$(this._workerId, other._workerId) && J.$eq$(this._isolateId, other._isolateId) && J.$eq$(this._receivePortId, other._receivePortId);
      },
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = this._workerId;
        if (typeof t1 !== "number")
          return t1.$shl();
        t2 = this._isolateId;
        if (typeof t2 !== "number")
          return t2.$shl();
        t3 = this._receivePortId;
        if (typeof t3 !== "number")
          return H.iae(t3);
        return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;_id<,_handler,_isClosed<",
      _close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      __isolate_helper$_add$1: function(dataEvent) {
        if (this._isClosed)
          return;
        this._handler.call$1(dataEvent);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker === true;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {
        TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    TimerImpl_internalCallback: {
      "^": "Closure:2;$this,callback",
      call$0: function() {
        this.$this._handle = null;
        this.callback.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:2;$this,callback",
      call$0: function() {
        this.$this._handle = null;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }
    },
    CapabilityImpl: {
      "^": "Object;_id<",
      get$hashCode: function(_) {
        var hash = this._id;
        if (typeof hash !== "number")
          return hash.$shr();
        hash = C.JSNumber_methods._shrOtherPositive$1(hash, 0) ^ C.JSNumber_methods._tdivFast$1(hash, 4294967296);
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this._id;
          t2 = other._id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = x.get$keys();
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$static_name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x._id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 1],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError((message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i, t1;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i) {
          t1 = this.serialize$1(x[i]);
          if (i >= serialized.length)
            return H.ioore(serialized, i);
          serialized[i] = t1;
        }
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i, t1;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i) {
          t1 = this.serialize$1(x[keys[i]]);
          if (i >= values.length)
            return H.ioore(values, i);
          values[i] = t1;
        }
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var serializationId, t1, result, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            if (1 >= x.length)
              return H.ioore(x, 1);
            serializationId = x[1];
            t1 = this.deserializedObjects;
            if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
              return H.ioore(t1, serializationId);
            return t1[serializationId];
          case "buffer":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
          case "mutable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "capability":
            if (1 >= x.length)
              return H.ioore(x, 1);
            return new H.CapabilityImpl(x[1]);
          case "dart":
            t1 = x.length;
            if (1 >= t1)
              return H.ioore(x, 1);
            classId = x[1];
            if (2 >= t1)
              return H.ioore(x, 2);
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 1],
      deserializeArrayInPlace$1: function(x) {
        var t1, i, t2;
        t1 = J.getInterceptor$asx(x);
        i = 0;
        while (true) {
          t2 = t1.get$length(x);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
          ++i;
        }
        return x;
      },
      deserializeMap$1: function(x) {
        var t1, keys, values, result, t2, i;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          result.$indexSet(0, keys[i], this.deserialize$1(t2.$index(values, i)));
        }
        return result;
      },
      deserializeSendPort$1: function(x) {
        var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        managerId = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        isolateId = x[2];
        if (3 >= t1)
          return H.ioore(x, 3);
        receivePortId = x[3];
        if (J.$eq$(managerId, init.globalState.currentManagerId)) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var t1, keys, values, o, t2, i, t3;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        t1 = J.getInterceptor$asx(keys);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t3 = t1.get$length(keys);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
          ++i;
        }
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    getType: function(index) {
      return init.types[index];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_TSE(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null), init.mangledGlobalNames);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
        case 1:
          return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
        case 2:
          return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
        case 3:
          return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
        case 4:
          return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        $constructor = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        selfName = "self" + H.S(t1);
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      $arguments += H.S(t1);
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    extractFunctionTypeObjectFrom: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      functionTypeObject = H.extractFunctionTypeObjectFrom(value);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, functionTypeRti);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      var typedefInfo;
      if (rti == null)
        return "dynamic";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      if (typeof rti == "function")
        return rti.builtin$cls;
      if (typeof rti === "number" && Math.floor(rti) === rti)
        return H.S(rti);
      if (typeof rti.func != "undefined") {
        typedefInfo = rti.typedef;
        if (typedefInfo != null)
          return H.runtimeTypeToString(typedefInfo, onTypeVariable);
        return H._functionRtiToString(rti, onTypeVariable);
      }
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, onTypeVariable) {
      var returnTypeText, $arguments, t1, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t2, $name;
      returnTypeText = !!rti.v ? "void" : H.runtimeTypeToString(rti.ret, onTypeVariable);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToString(argument, onTypeVariable);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToString(argument, onTypeVariable);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          $name = t1[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToString(namedArguments[$name], onTypeVariable) + (" " + H.S($name));
        }
        argumentsText += "}";
      }
      return "(" + argumentsText + ") => " + returnTypeText;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.runtimeTypeToString(argument, onTypeVariable);
      }
      return allDynamic ? "" : "<" + buffer.toString$0(0) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.getRuntimeTypeArguments(context, contextName));
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if (s.builtin$cls === "Null")
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function" || t.builtin$cls === "Object";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = H.runtimeTypeToString(typeOfT, null);
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("v" in s) {
        if (!("v" in t) && "ret" in t)
          return false;
      } else if (!("v" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_4IJ();
      hooks = H.applyHooksTransformer(C.JS_CONST_EKH, H.applyHooksTransformer(C.JS_CONST_EyN, H.applyHooksTransformer(C.JS_CONST_AgZ, H.applyHooksTransformer(C.JS_CONST_AgZ, H.applyHooksTransformer(C.JS_CONST_c0o, H.applyHooksTransformer(C.JS_CONST_LlX, H.applyHooksTransformer(C.JS_CONST_nuk(C.JS_CONST_TSE), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:1;ex",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:0;closure",
      call$0: function() {
        return this.closure.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:0;closure,arg1",
      call$0: function() {
        return this.closure.call$1(this.arg1);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:0;closure,arg1,arg2",
      call$0: function() {
        return this.closure.call$2(this.arg1, this.arg2);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:0;closure,arg1,arg2,arg3",
      call$0: function() {
        return this.closure.call$3(this.arg1, this.arg2, this.arg3);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:0;closure,arg1,arg2,arg3,arg4",
      call$0: function() {
        return this.closure.call$4(this.arg1, this.arg2, this.arg3, this.arg4);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        t1 = H.Primitives_objectHashCode(this._target);
        if (typeof receiverHashCode !== "number")
          return receiverHashCode.$xor();
        return (receiverHashCode ^ t1) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    JsLinkedHashMap: {
      "^": "Object;_length,_strings,_nums,_rest,_first,_last,_modifications,$ti",
      get$length: function(_) {
        return this._length;
      },
      get$isEmpty: function(_) {
        return this._length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function() {
        return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$hashMapCellValue();
      },
      $indexSet: function(_, key, value) {
        var strings, nums, rest, hash, bucket, index;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else {
          rest = this._rest;
          if (rest == null) {
            rest = this._newHashTable$0();
            this._rest = rest;
          }
          hash = this.internalComputeHashCode$1(key);
          bucket = this._getTableBucket$2(rest, hash);
          if (bucket == null)
            this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
          else {
            index = this.internalFindBucketIndex$2(bucket, key);
            if (index >= 0)
              bucket[index].set$hashMapCellValue(value);
            else
              bucket.push(this._newLinkedCell$2(key, value));
          }
        }
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return this._removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      },
      internalRemove$1: function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$hashMapCellValue();
      },
      clear$0: function(_) {
        if (this._length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this._length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.set$hashMapCellValue(value);
      },
      _removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          return;
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.get$hashMapCellValue();
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(key, value, null, null);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this._length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_previous();
        next = cell._next;
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this._length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$hashMapCellKey(), key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:1;$this",
      call$1: function(each) {
        return this.$this.$index(0, each);
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey<,hashMapCellValue@,_next,_previous<"
    },
    LinkedHashMapKeyIterable: {
      "^": "EfficientLengthIterable;_map,$ti",
      get$length: function(_) {
        return this._map._length;
      },
      get$isEmpty: function(_) {
        return this._map._length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
        t2._cell = t1._first;
        return t2;
      }
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,_cell,_current",
      get$current: function() {
        return this._current;
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this._current = null;
            return false;
          } else {
            this._current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:1;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:8;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:9;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    NativeByteBuffer: {
      "^": "Interceptor;",
      $isNativeByteBuffer: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      $isNativeTypedData: 1,
      "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.double];
      },
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.double];
      },
      $asEfficientLengthIterable: function() {
        return [P.double];
      }
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.int];
      },
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.int];
      },
      $asEfficientLengthIterable: function() {
        return [P.int];
      }
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 5],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 5],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 5],
    _asyncStart: function(bodyFunction, completer) {
      P._awaitOnObject(null, bodyFunction);
      return completer.get$future();
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      J.complete$1$x(completer, object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, future;
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$2(thenCallback, errorCallback);
      else if (!!t1.$isFuture)
        object.then$2$onError(thenCallback, errorCallback);
      else {
        future = new P._Future(0, $.Zone__current, null, [null]);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenNoZoneRegistration$2(thenCallback, null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      $.Zone__current.toString;
      return new P._wrapJsFunctionForAsync_closure($protected);
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Null, P.Null]})) {
        zone.toString;
        return errorHandler;
      } else {
        zone.toString;
        return errorHandler;
      }
    },
    Completer_Completer$sync: function($T) {
      return new P._SyncCompleter(new P._Future(0, $.Zone__current, null, [$T]), [$T]);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 2],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback, null);
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback, null);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, currentZone.bindCallback$2$runGuarded(callback, true));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return new P._StreamIterator(null, stream, false, [$T]);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      $.Zone__current.toString;
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Zone_current: function() {
      return $.Zone__current;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1)
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || false));
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:1;_box_0",
      call$1: function(_) {
        var t1, f;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:10;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._box_0.storedCallback = callback;
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;callback",
      call$0: function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;callback",
      call$0: function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }
    },
    _awaitOnObject_closure: {
      "^": "Closure:1;bodyFunction",
      call$1: function(result) {
        return this.bodyFunction.call$2(0, result);
      }
    },
    _awaitOnObject_closure0: {
      "^": "Closure:11;bodyFunction",
      call$2: function(error, stackTrace) {
        this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, stackTrace));
      }
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:12;$protected",
      call$2: function(errorCode, result) {
        this.$protected(errorCode, result);
      }
    },
    Future: {
      "^": "Object;$ti"
    },
    _Completer: {
      "^": "Object;future<,$ti",
      completeError$2: [function(error, stackTrace) {
        if (error == null)
          error = new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        $.Zone__current.toString;
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 6, 0]
    },
    _AsyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _SyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._complete$1(value);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener<,result,state,callback,errorCallback",
      get$_zone: function() {
        return this.result._zone;
      },
      get$handlesValue: function() {
        return (this.state & 1) !== 0;
      },
      get$handlesError: function() {
        return (this.state & 2) !== 0;
      },
      get$handlesComplete: function() {
        return this.state === 8;
      },
      handleValue$1: function(sourceResult) {
        return this.result._zone.runUnary$2(this.callback, sourceResult);
      },
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2(this.callback, J.get$error$x(asyncError));
      },
      handleError$1: function(asyncError) {
        var t1, t2, t3;
        t1 = this.errorCallback;
        t2 = J.getInterceptor$x(asyncError);
        t3 = this.result._zone;
        if (H.functionTypeTest(t1, {func: 1, args: [,,]}))
          return t3.runBinary$3(t1, t2.get$error(asyncError), asyncError.get$stackTrace());
        else
          return t3.runUnary$2(t1, t2.get$error(asyncError));
      },
      handleWhenComplete$0: function() {
        return this.result._zone.run$1(this.callback);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone,_resultOrListeners<,$ti",
      get$_isChained: function() {
        return this._state === 2;
      },
      get$_isComplete: function() {
        return this._state >= 4;
      },
      then$2$onError: function(f, onError) {
        var currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        return this._thenNoZoneRegistration$2(f, onError);
      },
      then$1: function(f) {
        return this.then$2$onError(f, null);
      },
      _thenNoZoneRegistration$2: function(f, onError) {
        var result = new P._Future(0, $.Zone__current, null, [null]);
        this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
        return result;
      },
      whenComplete$1: function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null, this.$ti);
        if (t1 !== C.C__RootZone)
          t1.toString;
        this._addListener$1(new P._FutureListener(null, result, 8, action, null));
        return result;
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = this._resultOrListeners;
            if (!source.get$_isComplete()) {
              source._addListener$1(listener);
              return;
            }
            this._state = source._state;
            this._resultOrListeners = source._resultOrListeners;
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
        }
      },
      _prependListeners$1: function(listeners) {
        var _box_0, t1, existingListeners, cursor, source;
        _box_0 = {};
        _box_0.listeners = listeners;
        if (listeners == null)
          return;
        t1 = this._state;
        if (t1 <= 1) {
          existingListeners = this._resultOrListeners;
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor.get$_nextListener() != null;)
              cursor = cursor._nextListener;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (t1 === 2) {
            source = this._resultOrListeners;
            if (!source.get$_isComplete()) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = source._state;
            this._resultOrListeners = source._resultOrListeners;
          }
          _box_0.listeners = this._reverseListeners$1(listeners);
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, new P._Future__prependListeners_closure(_box_0, this));
        }
      },
      _removeListeners$0: function() {
        var current = this._resultOrListeners;
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current.get$_nextListener();
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, listeners;
        t1 = this.$ti;
        if (H.checkSubtype(value, "$isFuture", t1, "$asFuture"))
          if (H.checkSubtype(value, "$is_Future", t1, null))
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 6, 0],
      _asyncComplete$1: function(value) {
        var t1;
        if (H.checkSubtype(value, "$isFuture", this.$ti, "$asFuture")) {
          this._chainFuture$1(value);
          return;
        }
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
      },
      _chainFuture$1: function(value) {
        var t1;
        if (H.checkSubtype(value, "$is_Future", this.$ti, null)) {
          if (value._state === 8) {
            this._state = 1;
            t1 = this._zone;
            t1.toString;
            P._rootScheduleMicrotask(null, null, t1, new P._Future__chainFuture_closure(this, value));
          } else
            P._Future__chainCoreFuture(value, this);
          return;
        }
        P._Future__chainForeignFuture(value, this);
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        var t1;
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      _Future$value$1: function(value, $T) {
        this._state = 4;
        this._resultOrListeners = value;
      },
      $isFuture: 1,
      static: {
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception;
          target._state = 1;
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var t1, current, listeners;
          for (; source.get$_isChained();)
            source = source._resultOrListeners;
          t1 = source.get$_isComplete();
          current = target._resultOrListeners;
          if (t1) {
            target._resultOrListeners = null;
            listeners = target._reverseListeners$1(current);
            target._state = source._state;
            target._resultOrListeners = source._resultOrListeners;
            P._Future__propagateToListeners(target, listeners);
          } else {
            target._state = 2;
            target._resultOrListeners = source;
            source._prependListeners$1(current);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, oldZone, result, current;
          _box_1 = {};
          _box_1.source = source;
          for (t1 = source; true;) {
            _box_0 = {};
            hasError = t1._state === 8;
            if (listeners == null) {
              if (hasError) {
                asyncError = t1._resultOrListeners;
                t1 = t1._zone;
                t2 = J.get$error$x(asyncError);
                t3 = asyncError.get$stackTrace();
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
              }
              return;
            }
            for (; listeners.get$_nextListener() != null; listeners = listeners0) {
              listeners0 = listeners._nextListener;
              listeners._nextListener = null;
              P._Future__propagateToListeners(_box_1.source, listeners);
            }
            sourceResult = _box_1.source._resultOrListeners;
            _box_0.listenerHasError = hasError;
            _box_0.listenerValueOrError = sourceResult;
            t1 = !hasError;
            if (!t1 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
              zone = listeners.get$_zone();
              if (hasError) {
                t2 = _box_1.source._zone;
                t2.toString;
                t2 = t2 == null ? zone == null : t2 === zone;
                if (!t2)
                  zone.toString;
                else
                  t2 = true;
                t2 = !t2;
              } else
                t2 = false;
              if (t2) {
                t1 = _box_1.source;
                asyncError = t1._resultOrListeners;
                t1 = t1._zone;
                t2 = J.get$error$x(asyncError);
                t3 = asyncError.get$stackTrace();
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              if (listeners.get$handlesComplete())
                new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, hasError, listeners).call$0();
              else if (t1) {
                if (listeners.get$handlesValue())
                  new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
              } else if (listeners.get$handlesError())
                new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t1 = _box_0.listenerValueOrError;
              if (!!J.getInterceptor(t1).$isFuture) {
                result = listeners.result;
                if (t1._state >= 4) {
                  current = result._resultOrListeners;
                  result._resultOrListeners = null;
                  listeners = result._reverseListeners$1(current);
                  result._state = t1._state;
                  result._resultOrListeners = t1._resultOrListeners;
                  _box_1.source = t1;
                  continue;
                } else
                  P._Future__chainCoreFuture(t1, result);
                return;
              }
            }
            result = listeners.result;
            listeners = result._removeListeners$0();
            t1 = _box_0.listenerHasError;
            t2 = _box_0.listenerValueOrError;
            if (!t1) {
              result._state = 4;
              result._resultOrListeners = t2;
            } else {
              result._state = 8;
              result._resultOrListeners = t2;
            }
            _box_1.source = result;
            t1 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:0;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:0;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:1;target",
      call$1: function(value) {
        var t1 = this.target;
        t1._state = 0;
        t1._complete$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:13;target",
      call$2: function(error, stackTrace) {
        this.target._completeError$2(error, stackTrace);
      },
      call$1: function(error) {
        return this.call$2(error, null);
      }
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;target,e,s",
      call$0: function() {
        this.target._completeError$2(this.e, this.s);
      }
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:0;$this,typedValue",
      call$0: function() {
        var t1, listeners;
        t1 = this.$this;
        listeners = t1._removeListeners$0();
        t1._state = 4;
        t1._resultOrListeners = this.typedValue;
        P._Future__propagateToListeners(t1, listeners);
      }
    },
    _Future__chainFuture_closure: {
      "^": "Closure:0;$this,value",
      call$0: function() {
        P._Future__chainCoreFuture(this.value, this.$this);
      }
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:0;$this,error,stackTrace",
      call$0: function() {
        this.$this._completeError$2(this.error, this.stackTrace);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:2;_box_1,_box_0,hasError,listener",
      call$0: function() {
        var completeResult, e, s, exception, t1, t2, originalSource;
        completeResult = null;
        try {
          completeResult = this.listener.handleWhenComplete$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = J.get$error$x(this._box_1.source._resultOrListeners);
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = this._box_1.source._resultOrListeners;
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = completeResult.get$_resultOrListeners();
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource));
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:1;originalSource",
      call$1: function(_) {
        return this.originalSource;
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:2;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_0.listenerValueOrError = this.listener.handleValue$1(this.sourceResult);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:2;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = this._box_1.source._resultOrListeners;
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) === true && t1.errorCallback != null) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_1;
          t2 = J.get$error$x(t1.source._resultOrListeners);
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1.source._resultOrListeners;
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,next"
    },
    Stream: {
      "^": "Object;$ti",
      map$1: function(_, convert) {
        return new P._MapStream(convert, this, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [P.int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      toList$0: function(_) {
        var t1, result, future;
        t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
        result = H.setRuntimeTypeInfo([], [t1]);
        future = new P._Future(0, $.Zone__current, null, [[P.List, t1]]);
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
        return future;
      },
      elementAt$1: function(_, index) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.subscription = null;
        t1.elementIndex = 0;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, index, future), true, new P.Stream_elementAt_closure0(t1, this, index, future), future.get$_completeError());
        return future;
      }
    },
    Stream_length_closure: {
      "^": "Closure:1;_box_0",
      call$1: function(_) {
        ++this._box_0.count;
      }
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,future",
      call$0: function() {
        this.future._complete$1(this._box_0.count);
      }
    },
    Stream_toList_closure: {
      "^": "Closure;$this,result",
      call$1: function(data) {
        this.result.push(data);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_toList_closure0: {
      "^": "Closure:0;result,future",
      call$0: function() {
        this.future._complete$1(this.result);
      }
    },
    Stream_elementAt_closure: {
      "^": "Closure;_box_0,$this,index,future",
      call$1: function(value) {
        var t1, t2;
        t1 = this._box_0;
        t2 = t1.elementIndex;
        if (this.index === t2) {
          P._cancelAndValue(t1.subscription, this.future, value);
          return;
        }
        t1.elementIndex = t2 + 1;
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_elementAt_closure0: {
      "^": "Closure:0;_box_0,$this,index,future",
      call$0: function() {
        this.future._completeError$1(P.IndexError$(this.index, this.$this, "index", null, this._box_0.elementIndex));
      }
    },
    StreamSubscription: {
      "^": "Object;"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_state<,$ti",
      pause$1: function(_, resumeSignal) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        this._state = (t1 + 128 | 4) >>> 0;
        if (t1 < 128 && this._pending != null)
          this._pending.cancelSchedule$0();
        if ((t1 & 4) === 0 && (this._state & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128) {
            if ((t1 & 64) !== 0) {
              t1 = this._pending;
              t1 = !t1.get$isEmpty(t1);
            } else
              t1 = false;
            if (t1)
              this._pending.schedule$1(this);
            else {
              t1 = (this._state & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
          }
        }
      },
      cancel$0: function() {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) === 0)
          this._cancel$0();
        t1 = this._cancelFuture;
        return t1 == null ? $.$get$Future__nullFuture() : t1;
      },
      _cancel$0: function() {
        var t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0)
          this._pending.cancelSchedule$0();
        if ((this._state & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._onCancel$0();
      },
      _async$_add$1: ["super$_BufferingStreamSubscription$_add", function(data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else
          this._addPending$1(new P._DelayedData(data, null, [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]));
      }],
      _addError$2: ["super$_BufferingStreamSubscription$_addError", function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      }],
      _async$_close$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = new P._StreamImplEvents(null, null, 0, [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]);
          this._pending = pending;
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._async$_onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture && t1 !== $.$get$Future__nullFuture())
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture && t2 !== $.$get$Future__nullFuture())
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, isInputPaused;
        if ((this._state & 64) !== 0) {
          t1 = this._pending;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1) {
          t1 = (this._state & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t1 = this._pending;
              t1 = t1 == null || t1.get$isEmpty(t1);
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this._state = (this._state & 4294967291) >>> 0;
        }
        for (; true; wasInputPaused = isInputPaused) {
          t1 = this._state;
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          this._state = (this._state & 4294967263) >>> 0;
        }
        t1 = this._state;
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = this._zone;
        t1.toString;
        this._async$_onData = onData;
        this._onError = P._registerErrorHandler(onError, t1);
        this._onDone = onDone;
      }
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:2;$this,error,stackTrace",
      call$0: function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.functionTypeTest(t2, {func: 1, args: [P.Object, P.StackTrace]});
        t4 = t1._zone;
        t5 = this.error;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this.stackTrace);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:2;$this",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }
    },
    _DelayedEvent: {
      "^": "Object;next@"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value,next,$ti",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      }
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function() {
        return;
      },
      set$next: function(_) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;_state<",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      },
      cancelSchedule$0: function() {
        if (this._state === 1)
          this._state = 3;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:0;$this,dispatch",
      call$0: function() {
        var t1, oldState, $event, t2;
        t1 = this.$this;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        $event = t1.firstPendingEvent;
        t2 = $event.get$next();
        t1.firstPendingEvent = t2;
        if (t2 == null)
          t1.lastPendingEvent = null;
        $event.perform$1(this.dispatch);
      }
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state,$ti",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          t1.set$next($event);
          this.lastPendingEvent = $event;
        }
      }
    },
    _StreamIterator: {
      "^": "Object;_subscription,_stateData,_isPaused,$ti"
    },
    _cancelAndValue_closure: {
      "^": "Closure:0;future,value",
      call$0: function() {
        return this.future._complete$1(this.value);
      }
    },
    _ForwardingStream: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
      },
      _handleData$2: function(data, sink) {
        sink._async$_add$1(data);
      },
      _handleError$3: function(error, stackTrace, sink) {
        sink._addError$2(error, stackTrace);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending,$ti",
      _async$_add$1: function(data) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_add(data);
      },
      _addError$2: function(error, stackTrace) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0();
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          return t1.cancel$0();
        }
        return;
      },
      _handleData$1: [function(data) {
        this._stream._handleData$2(data, this);
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, v: true, args: [S]};
        }, this.$receiver, "_ForwardingStreamSubscription");
      }],
      _handleError$2: [function(error, stackTrace) {
        this._stream._handleError$3(error, stackTrace, this);
      }, "call$2", "get$_handleError", 4, 0, 14],
      _handleDone$0: [function() {
        this._async$_close$0();
      }, "call$0", "get$_handleDone", 0, 0, 2],
      _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        this._subscription = this._stream._async$_source.listen$3$onDone$onError(this.get$_handleData(), this.get$_handleDone(), this.get$_handleError());
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      },
      static: {
        _ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
          var t1, t2;
          t1 = $.Zone__current;
          t2 = cancelOnError ? 1 : 0;
          t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null, [$S, $T]);
          t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
          return t2;
        }
      }
    },
    _MapStream: {
      "^": "_ForwardingStream;_transform,_async$_source,$ti",
      _handleData$2: function(inputEvent, sink) {
        var outputEvent, e, s, exception;
        outputEvent = null;
        try {
          outputEvent = this._transform.call$1(inputEvent);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        sink._async$_add$1(outputEvent);
      }
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;"
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = J.toString$0$(t2);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = P._rootHandleUncaughtError(null, null, this, e, s);
          return t1;
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = P._rootHandleUncaughtError(null, null, this, e, s);
          return t1;
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = P._rootHandleUncaughtError(null, null, this, e, s);
          return t1;
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      },
      $index: function(_, key) {
        return;
      },
      run$1: function(f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      },
      runUnary$2: function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:0;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:0;$this,f",
      call$0: function() {
        return this.$this.run$1(this.f);
      }
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:1;$this,f",
      call$1: function(arg) {
        return this.$this.runUnaryGuarded$2(this.f, arg);
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [null, null]));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2._contents = P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", ");
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1._contents = t1.get$_contents() + rightDelimiter;
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return new P._LinkedHashSet(0, null, null, null, null, null, 0, [$E]);
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.$get$_toStringVisiting().push(m);
        t2 = result;
        t2._contents = t2.get$_contents() + "{";
        t1.first = true;
        m.forEach$1(0, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1._contents = t1.get$_contents() + "}";
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;_length,_strings,_nums,_rest,_first,_last,_modifications,$ti",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].get$hashMapCellKey();
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      static: {
        _LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          return new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0, [$K, $V]);
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications,$ti",
      get$iterator: function(_) {
        var t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null);
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1;
        if (!(typeof object === "string" && object !== "__proto__"))
          t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        else
          t1 = true;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      },
      add$1: function(_, element) {
        var strings, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._LinkedHashSet__newHashTable();
            this._collection$_strings = strings;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._LinkedHashSet__newHashTable();
            this._collection$_nums = nums;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_collection$_previous();
        next = cell._collection$_next;
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next._collection$_previous = previous;
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$_element(), element))
            return i;
        return -1;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: null,
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next,_collection$_previous<"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1._element;
            this._collection$_cell = t1._collection$_next;
            return true;
          }
        }
      }
    },
    _HashSetBase: {
      "^": "SetBase;$ti"
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      get$isNotEmpty: function(receiver) {
        return this.get$length(receiver) !== 0;
      },
      map$1: function(receiver, f) {
        return new H.MappedListIterable(receiver, f, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0), null]);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: null
    },
    Maps_mapToString_closure: {
      "^": "Closure:15;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "ListIterable;_table,_head,_tail,_modificationCount,$ti",
      get$iterator: function(_) {
        return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      elementAt$1: function(_, index) {
        var $length, t1, t2, t3;
        $length = (this._tail - this._head & this._table.length - 1) >>> 0;
        if (0 > index || index >= $length)
          H.throwExpression(P.IndexError$(index, this, "index", null, $length));
        t1 = this._table;
        t2 = t1.length;
        t3 = (this._head + index & t2 - 1) >>> 0;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      clear$0: function(_) {
        var i, t1, t2, t3, t4;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
            if (i < 0 || i >= t3)
              return H.ioore(t2, i);
            t2[i] = null;
          }
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, t3, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        t3 = t2.length;
        if (t1 >= t3)
          return H.ioore(t2, t1);
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t3 - 1) >>> 0;
        return result;
      },
      _add$1: function(element) {
        var t1, t2, t3;
        t1 = this._table;
        t2 = this._tail;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2] = element;
        t3 = (t2 + 1 & t3 - 1) >>> 0;
        this._tail = t3;
        if (this._head === t3)
          this._grow$0();
        ++this._modificationCount;
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, this.$ti);
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = new Array(8);
        t1.fixed$length = Array;
        this._table = H.setRuntimeTypeInfo(t1, [$E]);
      },
      $asEfficientLengthIterable: null,
      static: {
        ListQueue$: function(initialCapacity, $E) {
          var t1 = new P.ListQueue(null, 0, 0, 0, [$E]);
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }
      }
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      map$1: function(_, f) {
        return new H.EfficientLengthMappedIterable(this, f, [H.getTypeArgumentByIndex(this, 0), null]);
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null);
        iterator._collection$_cell = this._collection$_first;
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator._collection$_current);
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator._collection$_current);
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator._collection$_current);
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        for (t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), t1._collection$_cell = this._collection$_first, elementIndex = 0; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: null
    },
    SetBase: {
      "^": "SetMixin;$ti"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null), null);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = String(e);
        throw H.wrapException(new P.FormatException(t1, null, null));
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _JsonMap: {
      "^": "Object;_original,_processed,_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1;
      },
      get$isNotEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 > 0;
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._upgrade$0().$indexSet(0, key, value);
      },
      containsKey$1: function(key) {
        if (this._processed == null)
          return this._data.containsKey$1(key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _computeKeys$0: function() {
        var keys = this._data;
        if (keys == null) {
          keys = Object.keys(this._original);
          this._data = keys;
        }
        return keys;
      },
      _upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
        keys = this._computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          keys.push(null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      }
    },
    Codec: {
      "^": "Object;"
    },
    Converter: {
      "^": "Object;"
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(source, reviver) {
        var t1 = P._parseJson(source, this.get$decoder()._reviver);
        return t1;
      },
      decode$1: function(source) {
        return this.decode$2$reviver(source, null);
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      }
    },
    JsonDecoder: {
      "^": "Converter;_reviver"
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      return list;
    },
    print: function(object) {
      H.printString(H.S(object));
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false), null, null);
    },
    bool: {
      "^": "Object;",
      get$hashCode: function(_) {
        return P.Object.prototype.get$hashCode.call(this, this);
      },
      toString$0: function(_) {
        return this ? "true" : "false";
      }
    },
    "+bool": 0,
    double: {
      "^": "num;"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration<",
      $add: function(_, other) {
        return new P.Duration(this._duration + other.get$_duration());
      },
      $sub: function(_, other) {
        return new P.Duration(this._duration - other.get$_duration());
      },
      $mul: function(_, factor) {
        if (typeof factor !== "number")
          return H.iae(factor);
        return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
      },
      $lt: function(_, other) {
        return this._duration < other.get$_duration();
      },
      $gt: function(_, other) {
        return this._duration > other.get$_duration();
      },
      $le: function(_, other) {
        return this._duration <= other.get$_duration();
      },
      $ge: function(_, other) {
        return C.JSInt_methods.$ge(this._duration, other.get$_duration());
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(0 - t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
        twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
        return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      abs$0: function(_) {
        return new P.Duration(Math.abs(this._duration));
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:7;",
      call$1: function(n) {
        if (n >= 100000)
          return "" + n;
        if (n >= 10000)
          return "0" + n;
        if (n >= 1000)
          return "00" + n;
        if (n >= 100)
          return "000" + n;
        if (n >= 10)
          return "0000" + n;
        return "00000" + n;
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:7;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + t1 + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {
        RangeError$: function(message) {
          return new P.RangeError(null, null, false, null, null, message);
        },
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (start > end || end > $length)
            throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
          return end;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + H.S(t1) + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message,source,offset",
      toString$0: function(_) {
        var t1, report, source;
        t1 = this.message;
        report = "" !== t1 ? "FormatException: " + t1 : "FormatException";
        source = this.source;
        if (typeof source !== "string")
          return report;
        if (source.length > 78)
          source = C.JSString_methods.substring$2(source, 0, 75) + "...";
        return report + "\n" + source;
      }
    },
    Expando: {
      "^": "Object;name,_jsWeakMapOrKey",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var t1, values;
        t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string") {
          if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
            H.throwExpression(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
          return t1.get(object);
        }
        values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, t1);
      },
      $indexSet: function(_, object, value) {
        var t1, values;
        t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string")
          t1.set(object, value);
        else {
          values = H.Primitives_getProperty(object, "expando$values");
          if (values == null) {
            values = new P.Object();
            H.Primitives_setProperty(object, "expando$values", values);
          }
          H.Primitives_setProperty(values, t1, value);
        }
      }
    },
    int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;$ti",
      map$1: function(_, f) {
        return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "Iterable", 0), null);
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      }
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;$ti",
      $asList: null,
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: null
    },
    "+List": 0,
    Null: {
      "^": "Object;",
      get$hashCode: function(_) {
        return P.Object.prototype.get$hashCode.call(this, this);
      },
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;"
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;"
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents<",
      get$length: function(_) {
        return this._contents.length;
      },
      get$isNotEmpty: function(_) {
        return this._contents.length !== 0;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    CssStyleDeclaration__camelCase: function(hyphenated) {
      return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
        return letter.toUpperCase();
      });
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    HttpRequest_getString: function(url, onProgress, withCredentials) {
      return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
    },
    HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
      var t1, t2, completer, xhr;
      t1 = W.HttpRequest;
      t2 = new P._Future(0, $.Zone__current, null, [t1]);
      completer = new P._AsyncCompleter(t2, [t1]);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
      t1 = W.ProgressEvent;
      W._EventStreamSubscription$(xhr, "load", new W.HttpRequest_request_closure(completer, xhr), false, t1);
      W._EventStreamSubscription$(xhr, "error", completer.get$completeError(), false, t1);
      xhr.send();
      return t2;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _wrapZone: function(callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallback$2$runGuarded(callback, true);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLBRElement|HTMLBaseElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLMapElement|HTMLMarqueeElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLParamElement|HTMLPictureElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLShadowElement|HTMLSlotElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;type=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAnchorElement"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAreaElement"
    },
    Blob: {
      "^": "Interceptor;type=",
      "%": "Blob|File"
    },
    BodyElement: {
      "^": "HtmlElement;",
      get$onLoad: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "load", false, [W.Event]);
      },
      $isInterceptor: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;height%,width%",
      getContext$2: function(receiver, contextId, attributes) {
        return receiver.getContext(contextId);
      },
      getContext$1: function($receiver, contextId) {
        return this.getContext$2($receiver, contextId, null);
      },
      "%": "HTMLCanvasElement"
    },
    CanvasRenderingContext2D: {
      "^": "Interceptor;fillStyle},globalAlpha},globalCompositeOperation}",
      clearRect$4: function(receiver, x, y, width, height) {
        return receiver.clearRect(x, y, width, height);
      },
      measureText$1: function(receiver, text) {
        return receiver.measureText(text);
      },
      restore$0: function(receiver) {
        return receiver.restore();
      },
      save$0: function(receiver) {
        return receiver.save();
      },
      strokeText$4: function(receiver, text, x, y, maxWidth) {
        return receiver.strokeText(text, x, y, maxWidth);
      },
      strokeText$3: function($receiver, text, x, y) {
        return $receiver.strokeText(text, x, y);
      },
      drawImageToRect$3$sourceRect: function(receiver, source, destRect, sourceRect) {
        receiver.drawImage(source, sourceRect.left, sourceRect.top, sourceRect.width, sourceRect.height, destRect.left, destRect.top, destRect.width, destRect.height);
      },
      drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
        return receiver.drawImage(source, destX, destY, destWidth, destHeight);
      },
      drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
        return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
      },
      fillText$4: function(receiver, text, x, y, maxWidth) {
        receiver.fillText(text, x, y);
      },
      fillText$3: function($receiver, text, x, y) {
        return this.fillText$4($receiver, text, x, y, null);
      },
      "%": "CanvasRenderingContext2D"
    },
    CharacterData: {
      "^": "Node;length=",
      $isInterceptor: 1,
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    CssStyleDeclaration: {
      "^": "Interceptor_CssStyleDeclarationBase;length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
        return propValue != null ? propValue : "";
      },
      _getPropertyValueHelper$1: function(receiver, propertyName) {
        if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
          return receiver.getPropertyValue(propertyName);
        else
          return receiver.getPropertyValue(P.Device_cssPrefix() + propertyName);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      get$height: function(receiver) {
        return this.getPropertyValue$1(receiver, "height");
      }
    },
    Document: {
      "^": "Node;",
      get$onLoad: function(receiver) {
        return new W._EventStream(receiver, "load", false, [W.Event]);
      },
      "%": "Document|HTMLDocument|XMLDocument"
    },
    DocumentFragment: {
      "^": "Node;",
      $isInterceptor: 1,
      "%": "DocumentFragment|ShadowRoot"
    },
    DomException: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomTokenList: {
      "^": "Interceptor;length=",
      "%": "DOMTokenList"
    },
    Element: {
      "^": "Node;",
      get$classes: function(receiver) {
        return new W._ElementCssClassSet(receiver);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      focus$0: function(receiver) {
        return receiver.focus();
      },
      get$onKeyDown: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "keydown", false, [W.KeyboardEvent]);
      },
      get$onKeyUp: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "keyup", false, [W.KeyboardEvent]);
      },
      get$onLoad: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "load", false, [W.Event]);
      },
      $isInterceptor: 1,
      "%": ";Element"
    },
    EmbedElement: {
      "^": "HtmlElement;height%,src},type=,width%",
      "%": "HTMLEmbedElement"
    },
    ErrorEvent: {
      "^": "Event;error=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;type=",
      "%": "AnimationEvent|AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|BlobEvent|ClipboardEvent|CloseEvent|CustomEvent|DeviceLightEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|ExtendableMessageEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|GeofencingEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaKeyMessageEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|NotificationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PopStateEvent|PresentationConnectionAvailableEvent|PresentationConnectionCloseEvent|ProgressEvent|PromiseRejectionEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|ServicePortConnectEvent|ServiceWorkerMessageEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|SyncEvent|TrackEvent|TransitionEvent|USBConnectionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      _addEventListener$3: function(receiver, type, listener, options) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, options) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), false);
      },
      "%": "MediaStream|MessagePort;EventTarget"
    },
    FieldSetElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLFieldSetElement"
    },
    FormElement: {
      "^": "HtmlElement;length=",
      "%": "HTMLFormElement"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;responseText=",
      open$5$async$password$user: function(receiver, method, url, async, password, user) {
        return receiver.open(method, url, true, user, password);
      },
      open$3$async: function($receiver, method, url, async) {
        return $receiver.open(method, url, async);
      },
      send$1: function(receiver, body_OR_data) {
        return receiver.send(body_OR_data);
      },
      $isHttpRequest: 1,
      $isObject: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequest_getString_closure: {
      "^": "Closure:16;",
      call$1: function(xhr) {
        return J.get$responseText$x(xhr);
      }
    },
    HttpRequest_request_closure: {
      "^": "Closure:1;completer,xhr",
      call$1: function(e) {
        var t1, t2, accepted, unknownRedirect, t3;
        t1 = this.xhr;
        t2 = t1.status;
        if (typeof t2 !== "number")
          return t2.$ge();
        accepted = t2 >= 200 && t2 < 300;
        unknownRedirect = t2 > 307 && t2 < 400;
        t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
        t3 = this.completer;
        if (t2)
          t3.complete$1(0, t1);
        else
          t3.completeError$1(e);
      }
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      get$onLoad: function(receiver) {
        return new W._EventStream(receiver, "load", false, [W.ProgressEvent]);
      },
      "%": ";XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;height%,src},width%",
      "%": "HTMLIFrameElement"
    },
    ImageElement: {
      "^": "HtmlElement;height%,src},width%",
      complete$1: function($receiver, arg0) {
        return $receiver.complete.call$1(arg0);
      },
      $isObject: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;height%,src},type=,width%",
      $isInterceptor: 1,
      "%": "HTMLInputElement"
    },
    KeyboardEvent: {
      "^": "UIEvent;keyCode=",
      "%": "KeyboardEvent"
    },
    KeygenElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLKeygenElement"
    },
    LinkElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLLinkElement"
    },
    MediaElement: {
      "^": "HtmlElement;error=,src}",
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MenuElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLMenuItemElement"
    },
    MouseEvent: {
      "^": "UIEvent;",
      "%": "WheelEvent;DragEvent|MouseEvent"
    },
    Navigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "Navigator"
    },
    Node: {
      "^": "EventTarget;",
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      $isObject: 1,
      "%": "Attr;Node"
    },
    OListElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;height%,type=,width%",
      "%": "HTMLObjectElement"
    },
    OutputElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLOutputElement"
    },
    PointerEvent: {
      "^": "MouseEvent;height=",
      "%": "PointerEvent"
    },
    ScriptElement: {
      "^": "HtmlElement;src},type=",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;length=,type=",
      "%": "HTMLSelectElement"
    },
    SourceElement: {
      "^": "HtmlElement;src},type=",
      "%": "HTMLSourceElement"
    },
    SpeechRecognitionError: {
      "^": "Event;error=",
      "%": "SpeechRecognitionError"
    },
    StyleElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLStyleElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLTextAreaElement"
    },
    TrackElement: {
      "^": "HtmlElement;src}",
      "%": "HTMLTrackElement"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"
    },
    VideoElement: {
      "^": "MediaElement;height%,width%",
      "%": "HTMLVideoElement"
    },
    Window: {
      "^": "EventTarget;",
      get$animationFrame: function(receiver) {
        var t1, t2;
        t1 = P.num;
        t2 = new P._Future(0, $.Zone__current, null, [t1]);
        this._ensureRequestAnimationFrame$0(receiver);
        this._requestAnimationFrame$1(receiver, W._wrapZone(new W.Window_animationFrame_closure(new P._SyncCompleter(t2, [t1]))));
        return t2;
      },
      _requestAnimationFrame$1: function(receiver, callback) {
        return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
      },
      _ensureRequestAnimationFrame$0: function(receiver) {
        if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
          return;
        (function($this) {
          var vendors = ['ms', 'moz', 'webkit', 'o'];
          for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
            $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
            $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
          }
          if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
            return;
          $this.requestAnimationFrame = function(callback) {
            return window.setTimeout(function() {
              callback(Date.now());
            }, 16);
          };
          $this.cancelAnimationFrame = function(id) {
            clearTimeout(id);
          };
        })(receiver);
      },
      get$onLoad: function(receiver) {
        return new W._EventStream(receiver, "load", false, [W.Event]);
      },
      $isInterceptor: 1,
      "%": "DOMWindow|Window"
    },
    Window_animationFrame_closure: {
      "^": "Closure:1;completer",
      call$1: function(time) {
        this.completer.complete$1(0, time);
      }
    },
    _ClientRect: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4, hash;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
        hash = 536870911 & t4 + ((67108863 & t4) << 3);
        hash ^= hash >>> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": "ClientRect"
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      "%": "DocumentType"
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isInterceptor: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    _ServiceWorker: {
      "^": "EventTarget;",
      $isInterceptor: 1,
      "%": "ServiceWorker"
    },
    _ElementCssClassSet: {
      "^": "CssClassSetImpl;_html$_element",
      readClasses$0: function() {
        var s, t1, t2, _i, trimmed;
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        for (t1 = this._html$_element.className.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._html$_element.className = s.join$1(0, " ");
      },
      get$length: function(_) {
        return this._html$_element.classList.length;
      },
      get$isEmpty: function(_) {
        return this._html$_element.classList.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._html$_element.classList.length !== 0;
      },
      contains$1: function(_, value) {
        return typeof value === "string" && this._html$_element.classList.contains(value);
      },
      add$1: function(_, value) {
        var list, t1;
        list = this._html$_element.classList;
        t1 = list.contains(value);
        list.add(value);
        return !t1;
      },
      remove$1: function(_, value) {
        var list, removed;
        list = this._html$_element.classList;
        removed = list.contains(value);
        list.remove(value);
        return removed;
      }
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture,$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, H.getTypeArgumentByIndex(this, 0));
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture,$ti"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture,$ti",
      cancel$0: function() {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._onData = null;
        return;
      },
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2 && this._pauseCount <= 0) {
          t3 = this._html$_target;
          t3.toString;
          if (t2)
            J._addEventListener$3$x(t3, this._eventType, t1, false);
        }
      },
      _unlisten$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2) {
          t3 = this._html$_target;
          t3.toString;
          if (t2)
            J._removeEventListener$3$x(t3, this._eventType, t1, false);
        }
      },
      _EventStreamSubscription$4: function(_target, _eventType, onData, _useCapture, $T) {
        this._tryResume$0();
      },
      static: {
        _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
          var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData));
          t1 = new W._EventStreamSubscription(0, _target, _eventType, t1, false, [$T]);
          t1._EventStreamSubscription$4(_target, _eventType, onData, false, $T);
          return t1;
        }
      }
    },
    _EventStreamSubscription_closure: {
      "^": "Closure:1;onData",
      call$1: function(e) {
        return this.onData.call$1(e);
      }
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
      },
      $isList: 1,
      $asList: null,
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: null
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_html$_length,_position,_html$_current",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._html$_length;
        if (nextPosition < t1) {
          this._html$_current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._html$_current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._html$_current;
      }
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    CssClassSetImpl: {
      "^": "Object;",
      _validateToken$1: function(value) {
        if ($.$get$CssClassSetImpl__validTokenRE()._nativeRegExp.test(value))
          return value;
        throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
      },
      toString$0: function(_) {
        return this.readClasses$0().join$1(0, " ");
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.readClasses$0();
        t2 = new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null);
        t2._collection$_cell = t1._collection$_first;
        return t2;
      },
      map$1: function(_, f) {
        var t1 = this.readClasses$0();
        return new H.EfficientLengthMappedIterable(t1, f, [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      get$isEmpty: function(_) {
        return this.readClasses$0()._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.readClasses$0()._collection$_length !== 0;
      },
      get$length: function(_) {
        return this.readClasses$0()._collection$_length;
      },
      contains$1: function(_, value) {
        if (typeof value !== "string")
          return false;
        this._validateToken$1(value);
        return this.readClasses$0().contains$1(0, value);
      },
      lookup$1: function(value) {
        return this.contains$1(0, value) ? value : null;
      },
      add$1: function(_, value) {
        this._validateToken$1(value);
        return this.modify$1(new P.CssClassSetImpl_add_closure(value));
      },
      remove$1: function(_, value) {
        var s, result;
        this._validateToken$1(value);
        s = this.readClasses$0();
        result = s.remove$1(0, value);
        this.writeClasses$1(s);
        return result;
      },
      elementAt$1: function(_, index) {
        return this.readClasses$0().elementAt$1(0, index);
      },
      modify$1: function(f) {
        var s, ret;
        s = this.readClasses$0();
        ret = f.call$1(s);
        this.writeClasses$1(s);
        return ret;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      }
    },
    CssClassSetImpl_add_closure: {
      "^": "Closure:1;value",
      call$1: function(s) {
        return s.add$1(0, this.value);
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": ""
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _JSRandom: {
      "^": "Object;",
      nextInt$1: function(max) {
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        return Math.random() * max >>> 0;
      },
      nextBool$0: function() {
        return Math.random() < 0.5;
      }
    },
    _RectangleBase: {
      "^": "Object;$ti",
      get$right: function(_) {
        return J.$add$ns(this.left, this.width);
      },
      get$bottom: function(_) {
        return J.$add$ns(this.top, this.height);
      },
      toString$0: function(_) {
        return "Rectangle (" + H.S(this.left) + ", " + H.S(this.top) + ") " + this.width + " x " + this.height;
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4, t5;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = this.left;
        t3 = J.getInterceptor(t2);
        if (t3.$eq(t2, t1.get$left(other))) {
          t4 = this.top;
          t5 = J.getInterceptor(t4);
          t1 = t5.$eq(t4, t1.get$top(other)) && J.$eq$(t3.$add(t2, this.width), t1.get$right(other)) && J.$eq$(t5.$add(t4, this.height), t1.get$bottom(other));
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.left;
        t2 = J.getInterceptor(t1);
        t3 = t2.get$hashCode(t1);
        t4 = this.top;
        t5 = J.getInterceptor(t4);
        t6 = t5.get$hashCode(t4);
        t1 = J.get$hashCode$(t2.$add(t1, this.width));
        t4 = J.get$hashCode$(t5.$add(t4, this.height));
        return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t3), t6), t1), t4));
      }
    },
    Rectangle: {
      "^": "_RectangleBase;left>,top>,width>,height>,$ti",
      $asRectangle: null,
      static: {
        Rectangle$: function(left, $top, width, height, $T) {
          var t1, t2;
          if (typeof width !== "number")
            return width.$lt();
          if (width < 0)
            t1 = -width * 0;
          else
            t1 = width;
          if (typeof height !== "number")
            return height.$lt();
          if (height < 0)
            t2 = -height * 0;
          else
            t2 = height;
          return new P.Rectangle(left, $top, t1, t2, [$T]);
        }
      }
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGAElement"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;type=,height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEOffsetElement"
    },
    FEPointLightElement: {
      "^": "SvgElement;x=,y=",
      "%": "SVGFEPointLightElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FESpotLightElement: {
      "^": "SvgElement;x=,y=",
      "%": "SVGFESpotLightElement"
    },
    FETileElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;type=,height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFilterElement"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;height=,width=,x=,y=",
      "%": "SVGForeignObjectElement"
    },
    GeometryElement: {
      "^": "GraphicsElement;",
      "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGImageElement"
    },
    Length: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGLength"
    },
    LengthList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      "%": "SVGLengthList"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Length];
      },
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $asList: function() {
        return [P.Length];
      },
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGMaskElement"
    },
    Number: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGNumber"
    },
    NumberList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin2;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      "%": "SVGNumberList"
    },
    Interceptor_ListMixin2: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Number];
      },
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin2: {
      "^": "Interceptor_ListMixin2+ImmutableListMixin;",
      $asList: function() {
        return [P.Number];
      },
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $isEfficientLengthIterable: 1
    },
    PatternElement: {
      "^": "SvgElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGPatternElement"
    },
    RectElement: {
      "^": "GeometryElement;height=,width=,x=,y=",
      "%": "SVGRectElement"
    },
    ScriptElement0: {
      "^": "SvgElement;type=",
      $isInterceptor: 1,
      "%": "SVGScriptElement"
    },
    StyleElement0: {
      "^": "SvgElement;type=",
      "%": "SVGStyleElement"
    },
    AttributeClassSet: {
      "^": "CssClassSetImpl;_svg$_element",
      readClasses$0: function() {
        var classname, s, t1, t2, _i, trimmed;
        classname = this._svg$_element.getAttribute("class");
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        if (classname == null)
          return s;
        for (t1 = classname.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._svg$_element.setAttribute("class", s.join$1(0, " "));
      }
    },
    SvgElement: {
      "^": "Element;",
      get$classes: function(receiver) {
        return new P.AttributeClassSet(receiver);
      },
      focus$0: function(receiver) {
        return receiver.focus();
      },
      get$onKeyDown: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "keydown", false, [W.KeyboardEvent]);
      },
      get$onKeyUp: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "keyup", false, [W.KeyboardEvent]);
      },
      get$onLoad: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "load", false, [W.Event]);
      },
      $isInterceptor: 1,
      "%": "SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGMetadataElement|SVGStopElement|SVGTitleElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": ";SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      "%": "SVGTextPathElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;x=,y=",
      "%": "SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;height=,width=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGViewElement"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": "",
    RenderingContext2: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WebGL2RenderingContext"
    }
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": ""
  }], ["event", "core/action.dart",, O, {
    "^": "",
    Action: {
      "^": "Object;object,event,type>",
      update$0: function() {
        var t1, character, message, animation, t2;
        t1 = this.type;
        if (t1 === 0) {
          character = this.object;
          message = this.event;
          message.set$x(0, character.screenPosPx.x);
          message.y = character.screenPosPx.y;
          message.wrapText$0();
        } else if (t1 === 1) {
          character = this.object;
          animation = this.event;
          t1 = animation.get$curPosPx();
          t2 = character.curPosPx;
          t1.x = t2.x;
          animation.curPosPx.y = t2.y;
          animation.update$0();
        } else if (t1 === 2)
          this.event.update$0();
      }
    }
  }], ["actor", "core/actor.dart",, E, {
    "^": "",
    Actor: {
      "^": "Character;maxLife,life,behaviour,maxEnergy,energy,message,combatable,attack,defense,dead,barHpImage,barMpImage,srcBarHp,srcBarMp,doc,ctx,canvas,characterImage,curPos,curPosPx,screenPosPx,frame,faceDir,selectedChar,characterRow,randomMovement,phasable,speed,chasing,chased,trigger,scene,offsetX,offsetY",
      initializeActor$9: function(combatable, behaviour, maxLife, maxEnergy, message, attack, defense, dead, speed) {
        var t1;
        this.combatable = combatable;
        this.behaviour = behaviour;
        this.maxLife = maxLife;
        this.life = maxLife;
        this.maxEnergy = maxEnergy;
        this.energy = maxEnergy;
        this.message = message;
        this.attack = attack;
        this.defense = defense;
        this.dead = false;
        this.barHpImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this.doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.barHpImage = t1;
        J.set$src$x(t1, "assets/particles/extra/hp_pixel.png");
        this.barMpImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this.doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.barMpImage = t1;
        J.set$src$x(t1, "assets/particles/extra/" + this.srcBarMp);
      },
      initializeActor$4: function(combatable, behaviour, maxLife, maxEnergy) {
        return this.initializeActor$9(combatable, behaviour, maxLife, maxEnergy, "", 0, 0, false, 1);
      },
      initializeActor$7: function(combatable, behaviour, maxLife, maxEnergy, message, attack, defense) {
        return this.initializeActor$9(combatable, behaviour, maxLife, maxEnergy, message, attack, defense, false, 1);
      },
      update$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, t2, barWeight, t3;
        var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.super$Character$update();
                if ($async$self.combatable === true && $async$self.dead !== true) {
                  t1 = $async$self.life;
                  t2 = $async$self.maxLife;
                  if (typeof t1 !== "number") {
                    $async$returnValue = t1.$div();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  if (typeof t2 !== "number") {
                    $async$returnValue = H.iae(t2);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  barWeight = C.JSNumber_methods.floor$0(32 * (t1 / t2));
                  t2 = $async$self.ctx;
                  t1 = $async$self.barHpImage;
                  t3 = $async$self.screenPosPx;
                  J.drawImageScaled$5$x(t2, t1, t3.x, J.$add$ns(J.$add$ns(t3.y, 32), 3), barWeight, 3);
                }
                if ($async$self.dead === true)
                  $async$self.chasing = false;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStart($async$update$0, $async$completer);
      }
    }
  }], ["character", "core/character.dart",, Z, {
    "^": "",
    Character: {
      "^": "Object;curPos<,curPosPx<",
      moveRandom$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this;
        var $async$moveRandom$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                P.Timer_Timer(C.Duration_2000000, $async$self.get$randomMove());
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$moveRandom$0, $async$completer);
      },
      randomMove$0: [function() {
        this.move$1(C.C__JSRandom.nextInt$1(4));
        this.moveRandom$0();
      }, "call$0", "get$randomMove", 0, 0, 2],
      moveTo$2: function(_, x, y) {
        var goal, $closed, $open, t1, t2, openUsed, closedUsed, t3, t4, iterations, current, neighbours, neighbour1, neighbour2, neighbour3, neighbour4, neighboursIte, bestNode, bestDistance, node, nodeDistance;
        goal = new L.Coordinate(null, null);
        goal.x = x;
        goal.y = y;
        if (this.curPos === goal)
          return;
        $closed = [];
        $open = [];
        t1 = this.scene;
        t2 = t1.gameMap.eventMapset;
        openUsed = T.Matrix$(t2.cols, t2.rows);
        t2 = t1.gameMap.eventMapset;
        closedUsed = T.Matrix$(t2.cols, t2.rows);
        $open.push(this.curPos);
        t2 = this.curPos;
        t3 = t2.x;
        t2 = t2.y;
        t4 = openUsed.m;
        if (t3 >>> 0 !== t3 || t3 >= t4.length)
          return H.ioore(t4, t3);
        t3 = t4[t3];
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          return H.ioore(t3, t2);
        t3[t2] = true;
        for (iterations = 0; true;) {
          ++iterations;
          if (100 === iterations)
            return;
          current = C.JSArray_methods.get$last($open);
          neighbours = [];
          if (J.$ge$n(J.$sub$n(current.y, 1), 0)) {
            t2 = current.x;
            t3 = J.$sub$n(current.y, 1);
            neighbour1 = new L.Coordinate(null, null);
            neighbour1.x = t2;
            neighbour1.y = t3;
            if (t1.objectIsPassable$3(this, neighbour1, 0) || neighbour1.isTheSame$1(goal))
              neighbours.push(neighbour1);
          }
          if (J.$lt$n(J.$add$ns(current.y, 1), t1.gameMap.eventMapset.rows)) {
            t2 = current.x;
            t3 = J.$add$ns(current.y, 1);
            neighbour2 = new L.Coordinate(null, null);
            neighbour2.x = t2;
            neighbour2.y = t3;
            if (t1.objectIsPassable$3(this, neighbour2, 1) || neighbour2.isTheSame$1(goal))
              neighbours.push(neighbour2);
          }
          if (J.$ge$n(J.$sub$n(current.x, 1), 0)) {
            t2 = J.$sub$n(current.x, 1);
            t3 = current.y;
            neighbour3 = new L.Coordinate(null, null);
            neighbour3.x = t2;
            neighbour3.y = t3;
            if (t1.objectIsPassable$3(this, neighbour3, 2) || neighbour3.isTheSame$1(goal))
              neighbours.push(neighbour3);
          }
          if (J.$lt$n(J.$add$ns(current.x, 1), t1.gameMap.eventMapset.cols)) {
            t2 = J.$add$ns(current.x, 1);
            t3 = current.y;
            neighbour4 = new L.Coordinate(null, null);
            neighbour4.x = t2;
            neighbour4.y = t3;
            if (t1.objectIsPassable$3(this, neighbour4, 3) || neighbour4.isTheSame$1(goal))
              neighbours.push(neighbour4);
          }
          neighboursIte = new J.ArrayIterator(neighbours, neighbours.length, 0, null);
          for (bestNode = null, bestDistance = 100; neighboursIte.moveNext$0();) {
            node = neighboursIte.__interceptors$_current;
            if (node.isTheSame$1(goal)) {
              this.recreatePath$1($open);
              return;
            }
            t2 = node.x;
            t3 = node.y;
            t4 = closedUsed.m;
            if (t2 >>> 0 !== t2 || t2 >= t4.length)
              return H.ioore(t4, t2);
            t2 = t4[t2];
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              return H.ioore(t2, t3);
            if (J.$eq$(t2[t3], true))
              continue;
            nodeDistance = J.$add$ns(J.abs$0$n(J.$sub$n(goal.x, node.x)), J.abs$0$n(J.$sub$n(goal.y, node.y)));
            if (J.$gt$n(bestDistance, nodeDistance)) {
              bestDistance = nodeDistance;
              bestNode = node;
            }
          }
          t2 = bestNode.x;
          t3 = bestNode.y;
          t4 = openUsed.m;
          if (t2 >>> 0 !== t2 || t2 >= t4.length)
            return H.ioore(t4, t2);
          t2 = t4[t2];
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t3 = t2[t3];
          if (t3 == null || J.$eq$(t3, false)) {
            $open.push(bestNode);
            t2 = bestNode.x;
            t3 = bestNode.y;
            t4 = openUsed.m;
            if (t2 >>> 0 !== t2 || t2 >= t4.length)
              return H.ioore(t4, t2);
            t2 = t4[t2];
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t2[t3] = true;
          }
          $closed.push(current);
          t2 = current.x;
          t3 = current.y;
          t4 = closedUsed.m;
          if (t2 >>> 0 !== t2 || t2 >= t4.length)
            return H.ioore(t4, t2);
          t2 = t4[t2];
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = true;
        }
      },
      recreatePath$1: function($open) {
        var openIte, node, t1;
        openIte = new J.ArrayIterator($open, $open.length, 0, null);
        for (; openIte.moveNext$0();) {
          node = openIte.__interceptors$_current;
          t1 = J.getInterceptor$x(node);
          if (J.$gt$n(t1.get$x(node), this.curPos.x))
            this.move$1(3);
          else if (J.$lt$n(t1.get$x(node), this.curPos.x))
            this.move$1(2);
          else if (J.$gt$n(t1.get$y(node), this.curPos.y))
            this.move$1(1);
          else if (J.$lt$n(t1.get$y(node), this.curPos.y))
            this.move$1(0);
        }
      },
      move$1: function(face) {
        var t1, initX, initY, t2, moved, t3, t4;
        t1 = this.curPos;
        initX = t1.x;
        initY = t1.y;
        t1 = this.scene;
        if (!t1.shallPass$2(face, this)) {
          this.faceDirection$1(face);
          return false;
        }
        switch (face) {
          case 0:
            this.faceDirection$1(0);
            if (J.$gt$n(this.curPos.y, 0)) {
              t2 = this.curPos;
              t2.y = J.$sub$n(t2.y, 1);
              moved = true;
            } else
              moved = false;
            break;
          case 1:
            this.faceDirection$1(1);
            if (J.$lt$n(this.curPos.y, 33)) {
              t2 = this.curPos;
              t2.y = J.$add$ns(t2.y, 1);
              moved = true;
            } else
              moved = false;
            break;
          case 2:
            this.faceDirection$1(2);
            if (J.$gt$n(this.curPos.x, 0)) {
              t2 = this.curPos;
              t2.x = J.$sub$n(t2.x, 1);
              moved = true;
            } else
              moved = false;
            break;
          case 3:
            this.faceDirection$1(3);
            if (J.$lt$n(this.curPos.x, 69)) {
              t2 = this.curPos;
              t2.x = J.$add$ns(t2.x, 1);
              moved = true;
            } else
              moved = false;
            break;
          default:
            moved = false;
        }
        if (J.$gt$n(J.$mul$ns(this.curPos.y, 32), J.$add$ns(this.curPosPx.y, 64))) {
          t2 = this.curPos;
          t3 = this.curPosPx.y;
          if (typeof t3 !== "number")
            return t3.$div();
          t2.y = C.JSDouble_methods.ceil$0(t3 / 32);
        }
        if (J.$gt$n(J.$mul$ns(this.curPos.x, 32), J.$add$ns(this.curPosPx.x, 64))) {
          t2 = this.curPos;
          t3 = this.curPosPx.x;
          if (typeof t3 !== "number")
            return t3.$div();
          t2.x = C.JSDouble_methods.ceil$0(t3 / 32);
        }
        if (J.$lt$n(J.$mul$ns(this.curPos.y, 32), J.$sub$n(this.curPosPx.y, 64))) {
          t2 = this.curPos;
          t3 = this.curPosPx.y;
          if (typeof t3 !== "number")
            return t3.$div();
          t2.y = C.JSDouble_methods.floor$0(t3 / 32);
        }
        if (J.$lt$n(J.$mul$ns(this.curPos.x, 32), J.$sub$n(this.curPosPx.x, 64))) {
          t2 = this.curPos;
          t3 = this.curPosPx.x;
          if (typeof t3 !== "number")
            return t3.$div();
          t2.x = C.JSDouble_methods.floor$0(t3 / 32);
        }
        if (moved) {
          t1 = t1.gameMap;
          t2 = this.curPos;
          t3 = t2.x;
          t2 = t2.y;
          t1 = t1.eventMapset.m;
          t4 = t1.length;
          if (t3 >>> 0 !== t3 || t3 >= t4)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          if (t2 >>> 0 !== t2 || t2 >= t3.length)
            return H.ioore(t3, t2);
          t3[t2] = this;
          if (initX >>> 0 !== initX || initX >= t4)
            return H.ioore(t1, initX);
          t1 = t1[initX];
          if (initY >>> 0 !== initY || initY >= t1.length)
            return H.ioore(t1, initY);
          t1[initY] = null;
          return true;
        }
        return false;
      },
      faceDirection$1: function(direction) {
        switch (direction) {
          case 1:
            this.faceDir = 0;
            break;
          case 2:
            this.faceDir = 1;
            break;
          case 3:
            this.faceDir = 2;
            break;
          case 0:
            this.faceDir = 3;
            break;
        }
      },
      getCurrentDirection$0: function() {
        switch (this.faceDir) {
          case 0:
            return 1;
          case 1:
            return 2;
          case 2:
            return 3;
          case 3:
            return 0;
        }
        return -1;
      },
      stopMove$0: function() {
        var t1, t2;
        if (J.$gt$n(J.$mul$ns(this.curPos.y, 32), this.curPosPx.y)) {
          t1 = this.curPosPx.y;
          if (typeof t1 !== "number")
            return t1.$mod();
          t2 = C.JSNumber_methods.$mod(t1, 32);
          this.curPos.y = Math.min(C.JSDouble_methods.floor$0((t1 + (32 - t2)) / 32), H.checkNum(this.curPos.y));
        }
        if (J.$gt$n(J.$mul$ns(this.curPos.x, 32), this.curPosPx.x)) {
          t1 = this.curPosPx.x;
          if (typeof t1 !== "number")
            return t1.$mod();
          t2 = C.JSNumber_methods.$mod(t1, 32);
          this.curPos.x = Math.min(C.JSDouble_methods.floor$0((t1 + (32 - t2)) / 32), H.checkNum(this.curPos.x));
        }
        if (J.$lt$n(J.$mul$ns(this.curPos.y, 32), this.curPosPx.y)) {
          t1 = this.curPosPx.y;
          if (typeof t1 !== "number")
            return t1.$mod();
          t2 = C.JSNumber_methods.$mod(t1, 32);
          this.curPos.y = Math.max(C.JSDouble_methods.floor$0((t1 + (32 - t2)) / 32), H.checkNum(this.curPos.y)) - 1;
        }
        if (J.$lt$n(J.$mul$ns(this.curPos.x, 32), this.curPosPx.x)) {
          t1 = this.curPosPx.x;
          if (typeof t1 !== "number")
            return t1.$mod();
          t2 = C.JSNumber_methods.$mod(t1, 32);
          this.curPos.x = Math.max(C.JSDouble_methods.floor$0((t1 + (32 - t2)) / 32), H.checkNum(this.curPos.x)) - 1;
        }
        this.frame = 4;
      },
      isMoving$0: function() {
        return !J.$eq$(this.curPosPx.x, J.$mul$ns(this.curPos.x, 32)) || !J.$eq$(this.curPosPx.y, J.$mul$ns(this.curPos.y, 32));
      },
      update$0: ["super$Character$update", function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, distance, t2, t3, t4, t5, t6;
        var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if ($async$self.isMoving$0()) {
                  t1 = $async$self.speed;
                  if (typeof t1 !== "number") {
                    $async$returnValue = H.iae(t1);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  distance = 2 * t1;
                  if (J.$gt$n(J.$mul$ns($async$self.curPos.y, 32), $async$self.curPosPx.y)) {
                    $async$self.faceDirection$1(1);
                    t1 = $async$self.curPosPx;
                    t2 = J.$add$ns(t1.y, distance);
                    t3 = J.$mul$ns($async$self.curPos.y, 32);
                    t1.y = Math.min(H.checkNum(t2), H.checkNum(t3));
                  }
                  if (J.$gt$n(J.$mul$ns($async$self.curPos.x, 32), $async$self.curPosPx.x)) {
                    $async$self.faceDirection$1(3);
                    t1 = $async$self.curPosPx;
                    t2 = J.$add$ns(t1.x, distance);
                    t3 = J.$mul$ns($async$self.curPos.x, 32);
                    t1.x = Math.min(H.checkNum(t2), H.checkNum(t3));
                  }
                  if (J.$lt$n(J.$mul$ns($async$self.curPos.y, 32), $async$self.curPosPx.y)) {
                    $async$self.faceDirection$1(0);
                    t1 = $async$self.curPosPx;
                    t2 = J.$sub$n(t1.y, distance);
                    t3 = J.$mul$ns($async$self.curPos.y, 32);
                    t1.y = Math.max(H.checkNum(t2), H.checkNum(t3));
                  }
                  if (J.$lt$n(J.$mul$ns($async$self.curPos.x, 32), $async$self.curPosPx.x)) {
                    $async$self.faceDirection$1(2);
                    t1 = $async$self.curPosPx;
                    t2 = J.$sub$n(t1.x, distance);
                    t3 = J.$mul$ns($async$self.curPos.x, 32);
                    t1.x = Math.max(H.checkNum(t2), H.checkNum(t3));
                  }
                  if (++$async$self.frame > 8)
                    $async$self.frame = 0;
                } else
                  $async$self.stopMove$0();
                t1 = $async$self.scene;
                $async$self.screenPosPx.x = J.$sub$n($async$self.curPosPx.x, t1.displayPxX);
                $async$self.screenPosPx.y = J.$sub$n($async$self.curPosPx.y, t1.displayPxY);
                if (!t1.inCamera$1($async$self.curPosPx)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if ($async$self.chasing)
                  if (!$async$self.curPos.nextToThis$2($async$self.faceDir, $async$self.chased.curPos)) {
                    t1 = $async$self.chased.curPos;
                    $async$self.moveTo$2(0, t1.x, t1.y);
                    $async$self.faceDirection$1($async$self.curPos.facingThis$2($async$self.faceDir, $async$self.chased.curPos));
                  }
                t1 = $async$self.ctx;
                t2 = $async$self.characterImage;
                t3 = $async$self.screenPosPx;
                t3 = P.Rectangle$(t3.x, t3.y, 32, 32, null);
                t4 = J.$mul$ns(J.$add$ns($async$self.selectedChar, C.JSDouble_methods.floor$0($async$self.frame / 4)), 32);
                t5 = $async$self.faceDir;
                t6 = $async$self.characterRow;
                if (typeof t6 !== "number") {
                  $async$returnValue = H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                J.drawImageToRect$3$sourceRect$x(t1, t2, t3, P.Rectangle$(t4, 32 * t5 + t6, 32, 32, null));
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStart($async$update$0, $async$completer);
      }],
      Character$6: function(curPos, selectedChar, characterRow, scene, imageSource, speed) {
        var t1, t2, t3;
        t1 = this.scene;
        this.doc = t1.doc;
        this.ctx = t1.ctx;
        this.canvas = t1.canvas;
        this.randomMovement = false;
        this.phasable = false;
        t1 = J.$mul$ns(this.curPos.x, 32);
        t2 = J.$mul$ns(this.curPos.y, 32);
        t3 = new L.Coordinate(null, null);
        t3.x = t1;
        t3.y = t2;
        this.curPosPx = t3;
        t3 = new L.Coordinate(null, null);
        t3.x = 0;
        t3.y = 0;
        this.screenPosPx = t3;
        this.frame = 1;
        this.faceDir = 0;
        this.trigger = false;
        this.chasing = false;
        this.offsetX = 0;
        this.offsetY = 0;
        this.selectedChar = J.$mul$ns(selectedChar, 3);
        this.characterRow = J.$mul$ns(J.$sub$n(characterRow, 1), 128);
        t3 = C.JSString_methods.$add("assets/character/", imageSource);
        this.characterImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t2 = this.doc;
        t2.toString;
        t1 = t2.createElement("img");
        this.characterImage = t1;
        J.set$src$x(t1, t3);
      }
    }
  }], ["coordinate", "helpers/coordinate.dart",, L, {
    "^": "",
    Coordinate: {
      "^": "Object;x*,y*",
      nextToThis$2: function(face, coor) {
        var deltaX, deltaY, t1;
        deltaX = J.$sub$n(coor.x, this.x);
        deltaY = J.$sub$n(coor.y, this.y);
        t1 = J.getInterceptor(deltaX);
        if (t1.$eq(deltaX, 0) && J.ceil$0$n(deltaY) === 1 && face === 0)
          return true;
        else if (t1.$eq(deltaX, 0) && J.round$0$n(deltaY) === -1 && face === 1)
          return true;
        else if (t1.ceil$0(deltaX) === 1 && J.$eq$(deltaY, 0) && face === 2)
          return true;
        else if (C.JSNumber_methods.round$0(deltaX) === -1 && J.$eq$(deltaY, 0) && face === 3)
          return true;
        return false;
      },
      nextToThis2$1: function(newCoord) {
        if (J.$eq$(newCoord.x, this.x) && J.$eq$(newCoord.y, this.y))
          return true;
        return false;
      },
      facingThis$2: function(face, coor) {
        var t1, deltaX, deltaY;
        t1 = J.$sub$n(coor.x, this.x);
        if (typeof t1 !== "number")
          return t1.$div();
        deltaX = t1 / 32;
        t1 = J.$sub$n(coor.y, this.y);
        if (typeof t1 !== "number")
          return t1.$div();
        deltaY = t1 / 32;
        t1 = deltaX === 0;
        if (t1 && C.JSDouble_methods.ceil$0(deltaY) === 1 && face === 0)
          return 1;
        else if (t1 && C.JSDouble_methods.round$0(deltaY) === -1 && face === 1)
          return 0;
        else if (C.JSDouble_methods.ceil$0(deltaX) === 1 && deltaY === 0 && face === 2)
          return 3;
        else if (C.JSDouble_methods.round$0(deltaX) === -1 && deltaY === 0 && face === 3)
          return 2;
        return -1;
      },
      isTheSame$1: function(c) {
        if (J.$eq$(c.x, this.x) && J.$eq$(c.y, this.y))
          return true;
        return false;
      }
    }
  }], ["entity", "core/entity.dart",, S, {
    "^": "",
    Entity: {
      "^": "Object;_entity$_doc,_entity$_ctx,canvas,itemImage,speed,curPos<,curPosPx<,tile,moving,pushable,scene",
      loadGraphic$1: function(src) {
        var t1;
        this.itemImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this._entity$_doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.itemImage = t1;
        J.set$src$x(t1, src);
        t1 = J.get$onLoad$x(this.itemImage);
        W._EventStreamSubscription$(t1._html$_target, t1._eventType, new S.Entity_loadGraphic_closure(this), false, H.getTypeArgumentByIndex(t1, 0));
      },
      move$1: function(face) {
        var t1, t2, initX, initY, deltaY, deltaX, moved, t3, t4;
        t1 = this.scene;
        if (!t1.shallPass$2(face, this))
          return false;
        t2 = this.curPos;
        initX = t2.x;
        initY = t2.y;
        deltaY = J.abs$0$n(J.$sub$n(J.$mul$ns(initY, 32), this.curPosPx.y));
        deltaX = J.abs$0$n(J.$sub$n(J.$mul$ns(this.curPos.x, 32), this.curPosPx.x));
        switch (face) {
          case 0:
            if (J.$gt$n(this.curPos.y, 0) && J.$lt$n(deltaY, 32)) {
              t2 = this.curPos;
              t2.y = J.$sub$n(t2.y, 1);
              moved = true;
            } else
              moved = false;
            break;
          case 1:
            t2 = J.$mul$ns(this.curPos.y, 32);
            t3 = J.get$height$x(this.canvas);
            if (typeof t3 !== "number")
              return t3.$sub();
            if (J.$lt$n(t2, t3 - 32) && J.$lt$n(deltaY, 32)) {
              t2 = this.curPos;
              t2.y = J.$add$ns(t2.y, 1);
              moved = true;
            } else
              moved = false;
            break;
          case 2:
            if (J.$gt$n(this.curPos.x, 0) && J.$lt$n(deltaX, 32)) {
              t2 = this.curPos;
              t2.x = J.$sub$n(t2.x, 1);
              moved = true;
            } else
              moved = false;
            break;
          case 3:
            t2 = J.$mul$ns(this.curPos.x, 32);
            t3 = J.get$width$x(this.canvas);
            if (typeof t3 !== "number")
              return t3.$sub();
            if (J.$lt$n(t2, t3 - 32) && J.$lt$n(deltaX, 32)) {
              t2 = this.curPos;
              t2.x = J.$add$ns(t2.x, 1);
              moved = true;
            } else
              moved = false;
            break;
          default:
            moved = false;
        }
        if (moved) {
          t1 = t1.gameMap;
          t2 = this.curPos;
          t3 = t2.x;
          t2 = t2.y;
          t1 = t1.eventMapset.m;
          t4 = t1.length;
          if (t3 >>> 0 !== t3 || t3 >= t4)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          if (t2 >>> 0 !== t2 || t2 >= t3.length)
            return H.ioore(t3, t2);
          t3[t2] = this;
          if (initX >>> 0 !== initX || initX >= t4)
            return H.ioore(t1, initX);
          t1 = t1[initX];
          if (initY >>> 0 !== initY || initY >= t1.length)
            return H.ioore(t1, initY);
          t1[initY] = null;
          return true;
        }
        return false;
      },
      update$0: function() {
        var distance, t1, t2, t3;
        if (!J.$eq$(this.curPosPx.x, J.$mul$ns(this.curPos.x, 32)) || !J.$eq$(this.curPosPx.y, J.$mul$ns(this.curPos.y, 32))) {
          distance = 2 * this.speed;
          if (J.$gt$n(J.$mul$ns(this.curPos.y, 32), this.curPosPx.y)) {
            t1 = this.curPosPx;
            t2 = J.$add$ns(t1.y, distance);
            t3 = J.$mul$ns(this.curPos.y, 32);
            t1.y = Math.min(H.checkNum(t2), H.checkNum(t3));
          }
          if (J.$gt$n(J.$mul$ns(this.curPos.x, 32), this.curPosPx.x)) {
            t1 = this.curPosPx;
            t2 = J.$add$ns(t1.x, distance);
            t3 = J.$mul$ns(this.curPos.x, 32);
            t1.x = Math.min(H.checkNum(t2), H.checkNum(t3));
          }
          if (J.$lt$n(J.$mul$ns(this.curPos.y, 32), this.curPosPx.y)) {
            t1 = this.curPosPx;
            t2 = J.$sub$n(t1.y, distance);
            t3 = J.$mul$ns(this.curPos.y, 32);
            t1.y = Math.max(H.checkNum(t2), H.checkNum(t3));
          }
          if (J.$lt$n(J.$mul$ns(this.curPos.x, 32), this.curPosPx.x)) {
            t1 = this.curPosPx;
            t2 = J.$sub$n(t1.x, distance);
            t3 = J.$mul$ns(this.curPos.x, 32);
            t1.x = Math.max(H.checkNum(t2), H.checkNum(t3));
          }
        }
        t1 = this.scene;
        if (!t1.inCamera$1(this.curPosPx))
          return;
        t2 = this.tile;
        J.drawImageToRect$3$sourceRect$x(this._entity$_ctx, this.itemImage, P.Rectangle$(J.$sub$n(this.curPosPx.x, t1.displayPxX), J.$sub$n(this.curPosPx.y, t1.displayPxY), 32, 32, null), P.Rectangle$(t2.xImg, t2.yImg, 32, 32, null));
      }
    },
    Entity_loadGraphic_closure: {
      "^": "Closure:1;$this",
      call$1: function(value) {
        return this.$this.update$0();
      }
    }
  }], ["", "gameengine.dart",, B, {
    "^": "",
    main: [function() {
      var t1, title, leftMargin, t2, t3, t4, initCoor, initCoor2, animation, partCoor, particle, sceneWidth, sceneHeight, t5, t6, t7, t8;
      t1 = window.document;
      $._doc = t1;
      title = t1.querySelector(".navbar");
      t1 = $._doc.querySelector("#canvas");
      $.canvas = t1;
      J.focus$0$x(t1);
      t1 = window.innerWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (2240 < t1) {
        t1 = window.innerWidth;
        if (typeof t1 !== "number")
          return t1.$sub();
        leftMargin = C.JSDouble_methods.floor$0((t1 - 2240) / 2);
        t1 = $.canvas.style;
        t2 = C.JSInt_methods.toString$0(leftMargin) + "px";
        t1.marginLeft = t2;
      }
      J.set$width$x($.canvas, window.innerWidth);
      t1 = $.canvas;
      t2 = window.innerHeight;
      t3 = C.JSNumber_methods.round$0(title.scrollHeight);
      if (typeof t2 !== "number")
        return t2.$sub();
      J.set$height$x(t1, t2 - t3);
      t3 = J.getContext$1$x($.canvas, "2d");
      $._ctx = t3;
      t2 = $._doc;
      t1 = $.canvas;
      t4 = new A.Scene(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t4.doc = t2;
      t4.ctx = t3;
      t4.canvas = t1;
      t4.gameMap = M.MapSet$(t4, 70, 34);
      initCoor = new L.Coordinate(null, null);
      initCoor.x = 15;
      initCoor.y = 10;
      initCoor2 = new L.Coordinate(null, null);
      initCoor2.x = 384;
      initCoor2.y = 128;
      animation = V.MapAnimation$(t4, initCoor2, "fire_001");
      animation.startAnimation$0();
      partCoor = new L.Coordinate(null, null);
      partCoor.x = 384;
      partCoor.y = 224;
      particle = D.Particle$(t4, partCoor, "smoke");
      particle.start$0(0);
      t1 = H.setRuntimeTypeInfo([], [D.Particle]);
      t4.particles = t1;
      t1.push(particle);
      t1 = H.setRuntimeTypeInfo([], [V.MapAnimation]);
      t4.activeAnimations = t1;
      t1.push(animation);
      t1 = new E.Actor(null, null, null, null, null, null, null, null, null, null, null, null, "hp_pixel.png", "mp_pixel.png", null, null, null, null, initCoor, null, null, null, null, null, null, null, null, 1, null, null, null, t4, null, null);
      t1.Character$6(initCoor, 0, 1, t4, "characters.png", 1);
      t4.player = t1;
      t1.initializeActor$4(true, 1, 100, 100);
      t4.actors = H.setRuntimeTypeInfo([], [E.Actor]);
      t4.entities = H.setRuntimeTypeInfo([], [S.Entity]);
      t4.displayX = 0;
      t4.displayY = 0;
      t4.displayPxX = 0;
      t4.displayPxY = 0;
      t4.events = H.setRuntimeTypeInfo([], [O.Action]);
      t4.projectiles = H.setRuntimeTypeInfo([], [K.Projectile]);
      t4.loadProperties$0();
      $.scene = t4;
      title = $._doc.querySelector(".navbar");
      t1 = window.innerWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (2240 < t1) {
        t1 = window.innerWidth;
        if (typeof t1 !== "number")
          return t1.$sub();
        sceneWidth = C.JSDouble_methods.floor$0((t1 - 2240) / 2);
      } else
        sceneWidth = window.innerWidth;
      t1 = window.innerHeight;
      t2 = C.JSNumber_methods.round$0(title.scrollHeight);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (1088 < t1 - t2) {
        t1 = window.innerHeight;
        t2 = C.JSNumber_methods.round$0(title.scrollHeight);
        if (typeof t1 !== "number")
          return t1.$sub();
        sceneHeight = C.JSDouble_methods.floor$0((t1 - t2 - 1088) / 2);
      } else {
        t1 = window.innerHeight;
        t2 = C.JSNumber_methods.round$0(title.scrollHeight);
        if (typeof t1 !== "number")
          return t1.$sub();
        sceneHeight = t1 - t2;
      }
      t1 = $.scene;
      t1.width = sceneWidth;
      t1.height = sceneHeight;
      B.setupKeys();
      t1 = $._doc;
      t2 = $._ctx;
      t3 = $.canvas;
      t4 = J.get$width$x(t3);
      if (typeof t4 !== "number")
        return t4.$div();
      t4 = C.JSDouble_methods.floor$0(t4 / 2);
      t5 = C.JSInt_methods.floor$0(340);
      t6 = $.scene;
      t7 = t6.width;
      t8 = window.innerWidth;
      if (t7 == null ? t8 == null : t7 === t8)
        t7 = 0;
      if (typeof t7 !== "number")
        return H.iae(t7);
      t6 = t6.height;
      if (typeof t6 !== "number")
        return t6.$sub();
      t3 = new R.WindowSet(t1, t2, t3, null, null, 680, 128, "Hi, welcome to this demo of Crystal Rift! \n Please use the A/S/D/W keys to move around. \n Use enter key to interact with characters and close this window. ", null, null);
      t2 = new L.Coordinate(null, null);
      t2.x = t4 - (t5 + t7);
      t2.y = t6 - 128 - 50;
      t3.curPos = t2;
      t3.startLine = 0;
      t3.endOfLine = false;
      t3.loadGraphic$1("assets/window/BlueGloss.png");
      $.windowInfo = t3;
      C.Window_methods.get$animationFrame(window).then$1(B.gameengine__update$closure());
    }, "call$0", "gameengine__main$closure", 0, 0, 2],
    update: [function(delta) {
      var t1;
      J.clearRect$4$x($._ctx, 0, 0, J.get$width$x($.canvas), J.get$height$x($.canvas));
      $.scene.update$0();
      t1 = $.windowInfo;
      if (!t1.endOfLine)
        t1.update$0();
      C.Window_methods.get$animationFrame(window).then$1(B.gameengine__update$closure());
    }, "call$1", "gameengine__update$closure", 2, 0, 17],
    setupKeys: function() {
      var t1 = J.get$onKeyDown$x($.canvas);
      W._EventStreamSubscription$(t1._html$_target, t1._eventType, new B.setupKeys_closure(), false, H.getTypeArgumentByIndex(t1, 0));
      t1 = J.get$onKeyUp$x($.canvas);
      W._EventStreamSubscription$(t1._html$_target, t1._eventType, new B.setupKeys_closure0(), false, H.getTypeArgumentByIndex(t1, 0));
    },
    setupKeys_closure: {
      "^": "Closure:1;",
      call$1: function(e) {
        var t1, character, t2, t3, t4, curPos, projectile;
        if (J.get$keyCode$x(e) === 37 || e.keyCode === 65)
          $.scene.move$1(2);
        else {
          t1 = e.keyCode;
          if (t1 === 38 || t1 === 87)
            $.scene.move$1(0);
          else if (t1 === 39 || t1 === 68)
            $.scene.move$1(3);
          else if (t1 === 40 || t1 === 83)
            $.scene.move$1(1);
          else if (t1 === 13) {
            $.windowInfo.startLine += 3;
            character = $.scene.getCharacterInFront$0();
            if (character != null)
              if (character.combatable === true) {
                t1 = J.$sub$n(character.life, 30 - J.floor$0$n(J.$mul$ns(character.defense, 0.1)));
                character.life = t1;
                if (J.$le$n(t1, 0))
                  character.dead = true;
                $.scene.createAnimation$1(character);
                t1 = $.scene.player;
                character.chasing = true;
                character.chased = t1;
              } else if (!character.trigger) {
                character.trigger = true;
                if (J.get$isNotEmpty$asx(character.message))
                  $.scene.createMessage$1(character);
              }
          } else if (t1 === 82) {
            t1 = $.scene;
            t2 = t1.player;
            t3 = t2.curPos;
            t4 = t3.x;
            t3 = t3.y;
            curPos = new L.Coordinate(null, null);
            curPos.x = t4;
            curPos.y = t3;
            projectile = new K.Projectile(null, null, null, null, curPos, null, null, t2.faceDir, 2, t1, 4, null);
            projectile.doc = t1.doc;
            projectile.ctx = t1.ctx;
            projectile.canvas = t1.canvas;
            projectile.steps = 0;
            t4 = J.$mul$ns(t4, 32);
            t1 = J.$mul$ns(curPos.y, 32);
            t2 = new L.Coordinate(null, null);
            t2.x = t4;
            t2.y = t1;
            projectile.curPosPx = t2;
            t2 = new L.Coordinate(null, null);
            t2.x = 0;
            t2.y = 0;
            projectile.screenPosPx = t2;
            projectile.loadGraphic$1("assets/particles/projectiles/arrow_faces.png");
            $.scene.projectiles.push(projectile);
          }
        }
      }
    },
    setupKeys_closure0: {
      "^": "Closure:1;",
      call$1: function(e) {
        $.scene.player.stopMove$0();
      }
    }
  }, 1], ["mapAnimation", "core/effects/mapAnimation.dart",, V, {
    "^": "",
    MapAnimation: {
      "^": "Object;doc,ctx,canvas,animationImage,scene,curPosPx<,animationFrame",
      startAnimation$0: function() {
        P.Timer_Timer(C.Duration_100000, this.get$updateFrame());
      },
      updateFrame$0: [function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, t2;
        var $async$updateFrame$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = J.get$height$x($async$self.animationImage);
                if (typeof t1 !== "number") {
                  $async$returnValue = t1.$div();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = $async$self.animationFrame;
                if (t2 >= t1 / 195 * 5) {
                  $async$self.animationFrame = 0;
                  t1 = 0;
                } else
                  t1 = t2;
                $async$self.animationFrame = t1 + 1;
                $async$self.startAnimation$0();
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStart($async$updateFrame$0, $async$completer);
      }, "call$0", "get$updateFrame", 0, 0, 3],
      update$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, t2, frameX, frameY;
        var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.scene;
                if (t1.inCamera$1($async$self.curPosPx)) {
                  t2 = $async$self.animationFrame;
                  frameX = C.JSInt_methods.$mod(t2, 5);
                  frameY = C.JSDouble_methods.floor$0(t2 / 5);
                  J.drawImageScaledFromSource$9$x($async$self.ctx, $async$self.animationImage, 192 * frameX, 195 * frameY, 192, 195, J.$sub$n($async$self.curPosPx.x, t1.displayPxX), J.$sub$n($async$self.curPosPx.y, t1.displayPxY), 32, 42);
                }
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$update$0, $async$completer);
      },
      loadGraphic$1: function(src) {
        var t1;
        this.animationImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this.doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.animationImage = t1;
        J.set$src$x(t1, src);
        t1 = J.get$onLoad$x(this.animationImage);
        W._EventStreamSubscription$(t1._html$_target, t1._eventType, new V.MapAnimation_loadGraphic_closure(this), false, H.getTypeArgumentByIndex(t1, 0));
      },
      MapAnimation$3: function(scene, curPosPx, file) {
        var t1 = this.scene;
        this.doc = t1.doc;
        this.ctx = t1.ctx;
        this.canvas = t1.canvas;
        this.animationFrame = 0;
        this.loadGraphic$1("assets/animations/" + file + ".png");
      },
      static: {
        MapAnimation$: function(scene, curPosPx, file) {
          var t1 = new V.MapAnimation(null, null, null, null, scene, curPosPx, null);
          t1.MapAnimation$3(scene, curPosPx, file);
          return t1;
        }
      }
    },
    MapAnimation_loadGraphic_closure: {
      "^": "Closure:1;$this",
      call$1: function(value) {
        return this.$this.update$0();
      }
    }
  }], ["mapset", "core/mapset.dart",, M, {
    "^": "",
    MapSet: {
      "^": "Object;doc,ctx,canvas,mapsetImage,structuresData,scene,width,height>,mapset,mapset2,mapset3,eventMapset",
      loadGraphic$1: function(src) {
        var t1;
        this.mapsetImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this.doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.mapsetImage = t1;
        J.set$src$x(t1, src);
        t1 = J.get$onLoad$x(this.mapsetImage);
        W._EventStreamSubscription$(t1._html$_target, t1._eventType, new M.MapSet_loadGraphic_closure(this), false, H.getTypeArgumentByIndex(t1, 0));
      },
      initValues$0: function() {
        var y, x, t, t1;
        for (y = 0; y < this.height; ++y)
          for (x = 0; x < this.width; ++x) {
            t = new K.Tile(null, null, null, null, null);
            t.xImg = 256;
            t.yImg = 64;
            t.x = 8;
            t.y = 2;
            t.type = 0;
            t1 = this.mapset.m;
            if (x >= t1.length)
              return H.ioore(t1, x);
            t1 = t1[x];
            if (y >= t1.length)
              return H.ioore(t1, y);
            t1[y] = t;
            t1 = this.mapset2.m;
            if (x >= t1.length)
              return H.ioore(t1, x);
            t1 = t1[x];
            if (y >= t1.length)
              return H.ioore(t1, y);
            t1[y] = 0;
            t1 = this.mapset3.m;
            if (x >= t1.length)
              return H.ioore(t1, x);
            t1 = t1[x];
            if (y >= t1.length)
              return H.ioore(t1, y);
            t1[y] = 0;
            t1 = this.eventMapset.m;
            if (x >= t1.length)
              return H.ioore(t1, x);
            t1 = t1[x];
            if (y >= t1.length)
              return H.ioore(t1, y);
            t1[y] = null;
          }
      },
      addBuilding$3: function(index, x, y) {
        var structure, t1, tilesMapset1, m, t2, t3, t4, t5, t, blocks, block, t6, tilesMapset2;
        structure = J.elementAt$1$ax(J.$index$asx(this.structuresData, "buildings"), index);
        t1 = J.getInterceptor$asx(structure);
        tilesMapset1 = J.get$iterator$ax(J.$index$asx(t1.$index(structure, "mapset1"), "tiles"));
        for (; tilesMapset1.moveNext$0();) {
          m = tilesMapset1.get$current();
          t2 = J.getInterceptor$asx(m);
          t3 = t2.$index(m, "xTile");
          t4 = t2.$index(m, "yTile");
          t5 = t2.$index(m, "type");
          t = new K.Tile(null, null, null, null, null);
          t.xImg = J.$mul$ns(t3, 32);
          t.yImg = J.$mul$ns(t4, 32);
          t.x = t3;
          t.y = t4;
          t.type = t5;
          blocks = J.get$iterator$ax(t2.$index(m, "blocks"));
          for (; blocks.moveNext$0();) {
            block = blocks.get$current();
            t3 = this.mapset;
            t4 = J.getInterceptor$asx(block);
            t5 = x + J.toInt$0$n(t4.$index(block, "x"));
            t6 = y + J.toInt$0$n(t4.$index(block, "y"));
            t3 = t3.m;
            if (t5 < 0 || t5 >= t3.length)
              return H.ioore(t3, t5);
            t5 = t3[t5];
            if (t6 < 0 || t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = t;
            if (J.$eq$(t2.$index(m, "type"), 3)) {
              t3 = x + J.toInt$0$n(t4.$index(block, "x"));
              t4 = y + J.toInt$0$n(t4.$index(block, "y"));
              t5 = this.eventMapset.m;
              if (t3 < 0 || t3 >= t5.length)
                return H.ioore(t5, t3);
              t3 = t5[t3];
              if (t4 < 0 || t4 >= t3.length)
                return H.ioore(t3, t4);
              t3[t4] = t;
            }
          }
        }
        tilesMapset2 = J.get$iterator$ax(J.$index$asx(t1.$index(structure, "mapset2"), "tiles"));
        for (; tilesMapset2.moveNext$0();) {
          m = tilesMapset2.get$current();
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "xTile");
          t3 = t1.$index(m, "yTile");
          t4 = t1.$index(m, "type");
          t = new K.Tile(null, null, null, null, null);
          t.xImg = J.$mul$ns(t2, 32);
          t.yImg = J.$mul$ns(t3, 32);
          t.x = t2;
          t.y = t3;
          t.type = t4;
          blocks = J.get$iterator$ax(t1.$index(m, "blocks"));
          for (; blocks.moveNext$0();) {
            block = blocks.get$current();
            t2 = this.mapset2;
            t3 = J.getInterceptor$asx(block);
            t4 = x + J.toInt$0$n(t3.$index(block, "x"));
            t5 = y + J.toInt$0$n(t3.$index(block, "y"));
            t2 = t2.m;
            if (t4 < 0 || t4 >= t2.length)
              return H.ioore(t2, t4);
            t4 = t2[t4];
            if (t5 < 0 || t5 >= t4.length)
              return H.ioore(t4, t5);
            t4[t5] = t;
            if (J.$eq$(t1.$index(m, "type"), 3)) {
              t2 = x + J.toInt$0$n(t3.$index(block, "x"));
              t3 = y + J.toInt$0$n(t3.$index(block, "y"));
              t4 = this.eventMapset.m;
              if (t2 < 0 || t2 >= t4.length)
                return H.ioore(t4, t2);
              t2 = t4[t2];
              if (t3 < 0 || t3 >= t2.length)
                return H.ioore(t2, t3);
              t2[t3] = t;
            }
          }
        }
      },
      addRandomDetails$0: function() {
        var i, rX, rY, t, t1;
        for (i = 0; i < 10; ++i) {
          rX = C.C__JSRandom.nextInt$1(this.mapset2.cols);
          rY = C.C__JSRandom.nextInt$1(this.mapset2.rows);
          t = new K.Tile(null, null, null, null, null);
          t.xImg = 32;
          t.yImg = 1024;
          t.x = 1;
          t.y = 32;
          t.type = 0;
          t1 = this.mapset.m;
          if (rX < 0 || rX >= t1.length)
            return H.ioore(t1, rX);
          t1 = t1[rX];
          if (rY < 0 || rY >= t1.length)
            return H.ioore(t1, rY);
          if (J.$eq$(J.get$type$x(t1[rY]), 0)) {
            t1 = this.mapset2.m;
            if (rX >= t1.length)
              return H.ioore(t1, rX);
            t1 = t1[rX];
            if (rY >= t1.length)
              return H.ioore(t1, rY);
            t1[rY] = t;
          } else
            --i;
        }
        for (i = 0; i < 12; ++i) {
          rX = C.C__JSRandom.nextInt$1(this.mapset2.cols);
          rY = C.C__JSRandom.nextInt$1(this.mapset2.rows);
          t = new K.Tile(null, null, null, null, null);
          t.xImg = 96;
          t.yImg = 1024;
          t.x = 3;
          t.y = 32;
          t.type = 0;
          t1 = this.mapset.m;
          if (rX < 0 || rX >= t1.length)
            return H.ioore(t1, rX);
          t1 = t1[rX];
          if (rY < 0 || rY >= t1.length)
            return H.ioore(t1, rY);
          if (J.$eq$(J.get$type$x(t1[rY]), 0)) {
            t1 = this.mapset2.m;
            if (rX >= t1.length)
              return H.ioore(t1, rX);
            t1 = t1[rX];
            if (rY >= t1.length)
              return H.ioore(t1, rY);
            t1[rY] = t;
          } else
            --i;
        }
        for (i = 0; i < 8; ++i) {
          rX = C.C__JSRandom.nextInt$1(this.mapset2.cols);
          rY = C.C__JSRandom.nextInt$1(this.mapset2.rows);
          t = new K.Tile(null, null, null, null, null);
          t.xImg = 128;
          t.yImg = 1024;
          t.x = 4;
          t.y = 32;
          t.type = 0;
          t1 = this.mapset.m;
          if (rX < 0 || rX >= t1.length)
            return H.ioore(t1, rX);
          t1 = t1[rX];
          if (rY < 0 || rY >= t1.length)
            return H.ioore(t1, rY);
          if (J.$eq$(J.get$type$x(t1[rY]), 0)) {
            t1 = this.mapset2.m;
            if (rX >= t1.length)
              return H.ioore(t1, rX);
            t1 = t1[rX];
            if (rY >= t1.length)
              return H.ioore(t1, rY);
            t1[rY] = t;
          } else
            --i;
        }
        for (i = 0; i < 8; ++i) {
          rX = C.C__JSRandom.nextInt$1(this.mapset2.cols);
          rY = C.C__JSRandom.nextInt$1(this.mapset2.rows);
          t = new K.Tile(null, null, null, null, null);
          t.xImg = 192;
          t.yImg = 1056;
          t.x = 6;
          t.y = 33;
          t.type = 0;
          t1 = this.mapset.m;
          if (rX < 0 || rX >= t1.length)
            return H.ioore(t1, rX);
          t1 = t1[rX];
          if (rY < 0 || rY >= t1.length)
            return H.ioore(t1, rY);
          if (J.$eq$(J.get$type$x(t1[rY]), 0)) {
            t1 = this.mapset2.m;
            if (rX >= t1.length)
              return H.ioore(t1, rX);
            t1 = t1[rX];
            if (rY >= t1.length)
              return H.ioore(t1, rY);
            t1[rY] = t;
          } else
            --i;
        }
      },
      update$0: function() {
        var t1, t2, offsetInitX, offsetInitY, offsetFinalX, offsetFinalY, offsetFinalX0, offsetFinalY0, e, t3, i, t4, tile, t5, t6, t7, t8, t9, t10, tile2;
        t1 = this.scene;
        t2 = t1.displayPxX;
        if (typeof t2 !== "number")
          return t2.$div();
        offsetInitX = C.JSDouble_methods.floor$0(t2 / 32);
        t2 = t1.displayPxY;
        if (typeof t2 !== "number")
          return t2.$div();
        offsetInitY = C.JSDouble_methods.floor$0(t2 / 32);
        t2 = J.get$width$x(this.canvas);
        if (typeof t2 !== "number")
          return t2.$div();
        offsetFinalX = C.JSDouble_methods.ceil$0(t2 / 32) + offsetInitX + 1;
        t2 = J.get$height$x(this.canvas);
        if (typeof t2 !== "number")
          return t2.$div();
        offsetFinalY = C.JSDouble_methods.ceil$0(t2 / 32) + offsetInitY + 1;
        offsetFinalX0 = this.width;
        if (offsetFinalX0 < offsetFinalX)
          offsetFinalX = offsetFinalX0;
        offsetFinalY0 = this.height;
        if (offsetFinalY0 < offsetFinalY)
          offsetFinalY = offsetFinalY0;
        for (t2 = [null], e = offsetInitY; e < offsetFinalY; ++e)
          for (t3 = e * 32, i = offsetInitX; i < offsetFinalX; ++i) {
            t4 = this.mapset.m;
            if (i < 0 || i >= t4.length)
              return H.ioore(t4, i);
            t4 = t4[i];
            if (e < 0 || e >= t4.length)
              return H.ioore(t4, e);
            tile = t4[e];
            t4 = this.ctx;
            t5 = this.mapsetImage;
            t6 = i * 32;
            t7 = t1.displayPxX;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t8 = t1.displayPxY;
            if (typeof t8 !== "number")
              return H.iae(t8);
            t9 = tile.get$xImg();
            t10 = tile.yImg;
            J.drawImageToRect$3$sourceRect$x(t4, t5, new P.Rectangle(t6 - t7, t3 - t8, 32, 32, t2), new P.Rectangle(t9, t10, 32, 32, t2));
            t4 = this.mapset2.m;
            if (i >= t4.length)
              return H.ioore(t4, i);
            t4 = t4[i];
            if (e >= t4.length)
              return H.ioore(t4, e);
            if (!J.$eq$(t4[e], 0)) {
              t4 = this.mapset2.m;
              if (i >= t4.length)
                return H.ioore(t4, i);
              t4 = t4[i];
              if (e >= t4.length)
                return H.ioore(t4, e);
              tile2 = t4[e];
              t4 = this.ctx;
              t5 = this.mapsetImage;
              t7 = t1.displayPxX;
              if (typeof t7 !== "number")
                return H.iae(t7);
              t8 = t1.displayPxY;
              if (typeof t8 !== "number")
                return H.iae(t8);
              t9 = tile2.get$xImg();
              t10 = tile2.yImg;
              J.drawImageToRect$3$sourceRect$x(t4, t5, new P.Rectangle(t6 - t7, t3 - t8, 32, 32, t2), new P.Rectangle(t9, t10, 32, 32, t2));
            }
          }
      },
      MapSet$3: function(scene, width, height) {
        var t1 = this.scene;
        this.doc = t1.doc;
        this.ctx = t1.ctx;
        this.canvas = t1.canvas;
        this.mapset = T.Matrix$(this.width, this.height);
        this.mapset2 = T.Matrix$(this.width, this.height);
        this.mapset3 = T.Matrix$(this.width, this.height);
        this.eventMapset = T.Matrix$(this.width, this.height);
        this.initValues$0();
        this.loadGraphic$1("assets/tileset/tileset.png");
      },
      static: {
        MapSet$: function(scene, width, height) {
          var t1 = new M.MapSet(null, null, null, null, null, scene, width, height, null, null, null, null);
          t1.MapSet$3(scene, width, height);
          return t1;
        }
      }
    },
    MapSet_loadGraphic_closure: {
      "^": "Closure:1;$this",
      call$1: function(value) {
        var t1 = this.$this;
        J.get$classes$x(t1.doc.querySelector("#loading")).add$1(0, "hidden");
        J.get$classes$x(t1.doc.querySelector("#canvas")).remove$1(0, "hidden");
        t1.update$0();
        return;
      }
    }
  }], ["matrix", "helpers/matrix.dart",, T, {
    "^": "",
    Matrix: {
      "^": "Object;m,rows,cols",
      Matrix$2: function(cols, rows) {
        var t1, i, t2;
        this.rows = rows;
        this.cols = cols;
        t1 = H.setRuntimeTypeInfo(new Array(cols), [P.List]);
        this.m = t1;
        for (i = 0; i < cols; ++i) {
          t2 = new Array(rows);
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      },
      static: {
        Matrix$: function(cols, rows) {
          var t1 = new T.Matrix(null, null, null);
          t1.Matrix$2(cols, rows);
          return t1;
        }
      }
    }
  }], ["message", "lib/message.dart",, E, {
    "^": "",
    Message: {
      "^": "Object;_message$_ctx,text,x*,y*,maxWidth,lineHeight,duration",
      wrapText$0: function() {
        var t1, t2, words, line, n, testLine, testWidth;
        t1 = this._message$_ctx;
        J.save$0$x(t1);
        t1.font = "12pt Verdana";
        t1.fillStyle = "white";
        t1.lineWidth = 3;
        t1.strokeStyle = "black";
        t1 = this.x;
        t2 = J.get$length$asx(this.text);
        if (typeof t2 !== "number")
          return t2.$mul();
        this.x = J.$sub$n(t1, t2 * 2.5);
        this.y = J.$sub$n(this.y, 8);
        words = J.split$1$s(this.text, " ");
        for (line = "", n = 0; n < words.length; ++n) {
          testLine = line + H.S(words[n]) + " ";
          testWidth = J.measureText$1$x(this._message$_ctx, testLine).width;
          t1 = this.maxWidth;
          if (typeof testWidth !== "number")
            return testWidth.$gt();
          if (testWidth > t1) {
            J.strokeText$3$x(this._message$_ctx, line, this.x, this.y);
            J.fillText$3$x(this._message$_ctx, line, this.x, this.y);
            if (n >= words.length)
              return H.ioore(words, n);
            line = H.S(words[n]) + " ";
            this.y = J.$add$ns(this.y, this.lineHeight);
          } else
            line = testLine;
        }
        P.print(this.y);
        J.strokeText$3$x(this._message$_ctx, line, this.x, this.y);
        J.fillText$3$x(this._message$_ctx, line, this.x, this.y);
        J.restore$0$x(this._message$_ctx);
      },
      update$0: function() {
        this.wrapText$0();
      }
    }
  }], ["particle", "core/effects/particle.dart",, D, {
    "^": "",
    Particle: {
      "^": "Object;doc,ctx,canvas,particles,particlesCoords,particlesAlpha,effect,curPosPx<,frame,maxParticles,width,height>,alpha,scene,blendType,color",
      start$0: function(_) {
        P.Timer_Timer(C.Duration_60000, this.get$updateAnimation());
      },
      updateAnimation$0: [function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, coordIte, t2, t3, t4, i, c, t5, cAlpha, t6, number, negative;
        var $async$updateAnimation$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self.particlesCoords;
                  coordIte = new J.ArrayIterator(t1, t1.length, 0, null);
                  ++$async$self.frame;
                  for (t1 = $async$self.effect, t2 = t1 === "circle", t3 = t1 === "fire", t4 = t1 !== "poison", t1 = t1 === "smoke", i = 0; coordIte.moveNext$0();) {
                    c = coordIte.__interceptors$_current;
                    if (!t4 || t1) {
                      t5 = $async$self.particlesAlpha;
                      if (i >= t5.length) {
                        $async$returnValue = H.ioore(t5, i);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      cAlpha = t5[i];
                      if (typeof cAlpha !== "number") {
                        $async$returnValue = cAlpha.$le();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t5 = cAlpha <= 0.05 || J.$le$n(J.get$y$x(c), $async$self.curPosPx.y);
                      t6 = J.getInterceptor$x(c);
                      if (t5) {
                        cAlpha = $async$self.alpha;
                        t6.set$y(c, J.$sub$n(J.$add$ns($async$self.curPosPx.y, 32), 17));
                        t6.set$x(c, J.$sub$n(J.$add$ns($async$self.curPosPx.x, C.JSInt_methods.floor$0(16)), 5));
                      } else {
                        number = C.C__JSRandom.nextInt$1(2);
                        negative = C.C__JSRandom.nextBool$0();
                        cAlpha -= number / 50;
                        t6.set$y(c, J.$sub$n(t6.get$y(c), number));
                        t5 = t6.get$x(c);
                        t6.set$x(c, J.$add$ns(t5, negative ? number * -1 : number));
                      }
                      C.JSArray_methods.insert$2($async$self.particlesAlpha, i, cAlpha);
                    } else if (t3) {
                      t5 = $async$self.particlesAlpha;
                      if (i >= t5.length) {
                        $async$returnValue = H.ioore(t5, i);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      cAlpha = t5[i];
                      if (typeof cAlpha !== "number") {
                        $async$returnValue = cAlpha.$le();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t5 = cAlpha <= 0.05 || J.$le$n(J.get$y$x(c), $async$self.curPosPx.y);
                      t6 = J.getInterceptor$x(c);
                      if (t5) {
                        cAlpha = $async$self.alpha;
                        t6.set$y(c, J.$sub$n(J.$add$ns($async$self.curPosPx.y, 32), 17));
                        t6.set$x(c, J.$sub$n(J.$add$ns($async$self.curPosPx.x, C.JSInt_methods.floor$0(16)), 5));
                      } else {
                        number = C.C__JSRandom.nextInt$1(2);
                        negative = C.C__JSRandom.nextBool$0();
                        cAlpha -= number / 50;
                        t6.set$y(c, J.$sub$n(t6.get$y(c), number));
                        t5 = t6.get$x(c);
                        t6.set$x(c, J.$add$ns(t5, negative ? number * -1 : number));
                      }
                      C.JSArray_methods.insert$2($async$self.particlesAlpha, i, cAlpha);
                    } else if (t2) {
                      number = C.C__JSRandom.nextInt$1(6);
                      t5 = J.getInterceptor$x(c);
                      t5.set$x(c, J.$add$ns($async$self.curPosPx.x, C.JSNumber_methods.floor$0(32 * Math.cos($async$self.frame + number))));
                      t5.set$y(c, J.$add$ns($async$self.curPosPx.y, C.JSNumber_methods.floor$0(32 * Math.sin($async$self.frame + number))));
                    }
                    ++i;
                  }
                  $async$self.start$0(0);
                case 1:
                  // return
                  return P._asyncReturn($async$returnValue, $async$completer);
              }
        });
        return P._asyncStart($async$updateAnimation$0, $async$completer);
      }, "call$0", "get$updateAnimation", 0, 0, 3],
      update$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, t2, partIte, coord, alphaIte, p, nAlpha, c;
        var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.scene;
                if (t1.inCamera$1($async$self.curPosPx)) {
                  t2 = $async$self.particles;
                  partIte = new J.ArrayIterator(t2, t2.length, 0, null);
                  t2 = $async$self.particlesCoords;
                  coord = new J.ArrayIterator(t2, t2.length, 0, null);
                  t2 = $async$self.particlesAlpha;
                  alphaIte = new J.ArrayIterator(t2, t2.length, 0, null);
                  for (; partIte.moveNext$0();) {
                    p = partIte.__interceptors$_current;
                    alphaIte.moveNext$0();
                    nAlpha = alphaIte.__interceptors$_current;
                    coord.moveNext$0();
                    c = coord.__interceptors$_current;
                    J.save$0$x($async$self.ctx);
                    J.set$globalAlpha$x($async$self.ctx, nAlpha);
                    t2 = $async$self.blendType;
                    if (t2 != null) {
                      J.set$globalCompositeOperation$x($async$self.ctx, t2);
                      J.set$fillStyle$x($async$self.ctx, $async$self.color);
                    }
                    t2 = J.getInterceptor$x(c);
                    J.drawImageScaled$5$x($async$self.ctx, p, J.$sub$n(t2.get$x(c), t1.displayPxX), J.$sub$n(t2.get$y(c), t1.displayPxY), $async$self.width, $async$self.height);
                    J.restore$0$x($async$self.ctx);
                  }
                }
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$update$0, $async$completer);
      },
      loadGraphic$1: function(src) {
        var t1, particleImage, i, particleImageN, number, t2, coordinateN, nAlpha;
        W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this.doc;
        t1.toString;
        particleImage = t1.createElement("img");
        t1 = J.getInterceptor$x(particleImage);
        t1.set$src(particleImage, src);
        t1 = t1.get$onLoad(particleImage);
        W._EventStreamSubscription$(t1._html$_target, t1._eventType, new D.Particle_loadGraphic_closure(this), false, H.getTypeArgumentByIndex(t1, 0));
        i = 0;
        while (true) {
          t1 = this.maxParticles;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          particleImageN = particleImage.cloneNode(false);
          this.particles.push(particleImageN);
          number = C.C__JSRandom.nextInt$1(5);
          t1 = J.$add$ns(J.$add$ns(this.curPosPx.x, C.JSInt_methods.floor$0(16)), number);
          t2 = J.$sub$n(J.$add$ns(this.curPosPx.y, 32), 16);
          coordinateN = new L.Coordinate(null, null);
          coordinateN.x = t1;
          coordinateN.y = t2;
          this.particlesCoords.push(coordinateN);
          nAlpha = this.alpha;
          this.particlesAlpha.push(nAlpha);
          ++i;
        }
      },
      Particle$3: function(scene, curPosPx, effect) {
        var t1 = this.scene;
        this.doc = t1.doc;
        this.ctx = t1.ctx;
        this.canvas = t1.canvas;
        this.particles = H.setRuntimeTypeInfo([], [W.ImageElement]);
        this.particlesCoords = H.setRuntimeTypeInfo([], [L.Coordinate]);
        this.particlesAlpha = H.setRuntimeTypeInfo([], [P.num]);
        this.frame = 0;
        t1 = this.effect;
        if (t1 === "poison") {
          this.alpha = 0.5;
          this.maxParticles = 10;
          this.width = C.JSDouble_methods.floor$0(6.4);
          this.height = C.JSDouble_methods.floor$0(6.4);
          this.loadGraphic$1("assets/particles/particle_purple.png");
        } else if (t1 === "smoke") {
          this.alpha = 0.7;
          this.maxParticles = 20;
          this.blendType = "lighter";
          this.color = "#FFF";
          this.width = C.JSDouble_methods.floor$0(10.666666666666666);
          this.height = C.JSDouble_methods.floor$0(10.666666666666666);
          this.loadGraphic$1("assets/particles/smoke.png");
        } else if (t1 === "fire") {
          this.blendType = "lighter";
          this.color = "#f30";
          this.alpha = 0.4;
          this.maxParticles = 25;
          this.width = C.JSDouble_methods.floor$0(10.666666666666666);
          this.height = C.JSDouble_methods.floor$0(10.666666666666666);
          this.loadGraphic$1("assets/particles/particle_yellow.png");
        } else if (t1 === "circle") {
          this.alpha = 0.6;
          this.maxParticles = 3;
          this.width = 32;
          this.height = 32;
          this.loadGraphic$1("assets/particles/star_yellow.png");
          this.loadGraphic$1("assets/particles/star_red.png");
          this.loadGraphic$1("assets/particles/star_blue.png");
          this.loadGraphic$1("assets/particles/star_green.png");
        }
      },
      static: {
        Particle$: function(scene, curPosPx, effect) {
          var t1 = new D.Particle(null, null, null, null, null, null, effect, curPosPx, null, null, null, null, null, scene, null, null);
          t1.Particle$3(scene, curPosPx, effect);
          return t1;
        }
      }
    },
    Particle_loadGraphic_closure: {
      "^": "Closure:1;$this",
      call$1: function(value) {
        return this.$this.update$0();
      }
    }
  }], ["projectile", "core/projectile.dart",, K, {
    "^": "",
    Projectile: {
      "^": "Object;doc,ctx,canvas,image,curPos,curPosPx<,screenPosPx,faceDir,speed,scene,range,steps",
      loadGraphic$1: function(src) {
        var t1;
        this.image = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this.doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.image = t1;
        J.set$src$x(t1, src);
      },
      update$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, distance, t2, t3;
        var $async$update$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if ($async$self.steps === $async$self.range)
                  $async$self.scene.removeProjectile$1($async$self);
                switch ($async$self.faceDir) {
                  case 0:
                    if (J.$eq$($async$self.curPosPx.y, J.$mul$ns($async$self.curPos.y, 32))) {
                      t1 = $async$self.curPos;
                      t1.y = J.$add$ns(t1.y, 1);
                      ++$async$self.steps;
                    }
                    break;
                  case 1:
                    if (J.$eq$($async$self.curPosPx.x, J.$mul$ns($async$self.curPos.x, 32))) {
                      t1 = $async$self.curPos;
                      t1.x = J.$sub$n(t1.x, 1);
                      ++$async$self.steps;
                    }
                    break;
                  case 2:
                    if (J.$eq$($async$self.curPosPx.x, J.$mul$ns($async$self.curPos.x, 32))) {
                      t1 = $async$self.curPos;
                      t1.x = J.$add$ns(t1.x, 1);
                      ++$async$self.steps;
                    }
                    break;
                  case 3:
                    if (J.$eq$($async$self.curPosPx.y, J.$mul$ns($async$self.curPos.y, 32))) {
                      t1 = $async$self.curPos;
                      t1.y = J.$sub$n(t1.y, 1);
                      ++$async$self.steps;
                    }
                    break;
                }
                distance = 2 * $async$self.speed;
                if (J.$gt$n(J.$mul$ns($async$self.curPos.y, 32), $async$self.curPosPx.y)) {
                  t1 = $async$self.curPosPx;
                  t2 = J.$add$ns(t1.y, distance);
                  t3 = J.$mul$ns($async$self.curPos.y, 32);
                  t1.y = Math.min(H.checkNum(t2), H.checkNum(t3));
                }
                if (J.$gt$n(J.$mul$ns($async$self.curPos.x, 32), $async$self.curPosPx.x)) {
                  t1 = $async$self.curPosPx;
                  t2 = J.$add$ns(t1.x, distance);
                  t3 = J.$mul$ns($async$self.curPos.x, 32);
                  t1.x = Math.min(H.checkNum(t2), H.checkNum(t3));
                }
                if (J.$lt$n(J.$mul$ns($async$self.curPos.y, 32), $async$self.curPosPx.y)) {
                  t1 = $async$self.curPosPx;
                  t2 = J.$sub$n(t1.y, distance);
                  t3 = J.$mul$ns($async$self.curPos.y, 32);
                  t1.y = Math.max(H.checkNum(t2), H.checkNum(t3));
                }
                if (J.$lt$n(J.$mul$ns($async$self.curPos.x, 32), $async$self.curPosPx.x)) {
                  t1 = $async$self.curPosPx;
                  t2 = J.$sub$n(t1.x, distance);
                  t3 = J.$mul$ns($async$self.curPos.x, 32);
                  t1.x = Math.max(H.checkNum(t2), H.checkNum(t3));
                }
                t1 = $async$self.scene;
                $async$self.screenPosPx.x = J.$sub$n($async$self.curPosPx.x, t1.displayPxX);
                $async$self.screenPosPx.y = J.$sub$n($async$self.curPosPx.y, t1.displayPxY);
                if (!t1.inCamera$1($async$self.curPosPx)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = $async$self.ctx;
                t2 = $async$self.image;
                t3 = $async$self.screenPosPx;
                J.drawImageToRect$3$sourceRect$x(t1, t2, P.Rectangle$(t3.x, t3.y, 32, 32, null), P.Rectangle$(0, 32 * $async$self.faceDir, 32, 32, null));
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStart($async$update$0, $async$completer);
      }
    }
  }], ["scene", "core/scene.dart",, A, {
    "^": "",
    Scene: {
      "^": "Object;doc,ctx,canvas,gameMap,player,actors,entities,events,activeAnimations,particles,projectiles,width,height>,displayX,displayY,displayPxX,displayPxY",
      update$0: function() {
        var t1, t2;
        t1 = this.displayPxX;
        t2 = this.displayX;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (t1 === t2 * 32) {
          t1 = this.displayPxY;
          t2 = this.displayY;
          if (typeof t2 !== "number")
            return t2.$mul();
          t2 = t1 !== t2 * 32;
          t1 = t2;
        } else
          t1 = true;
        if (t1 && this.player.isMoving$0())
          this.updateCameraMovement$0();
        else {
          t1 = this.displayY;
          if (typeof t1 !== "number")
            return t1.$mul();
          t2 = this.displayPxY;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 * 32 > t2)
            this.displayY = Math.min(C.JSDouble_methods.floor$0((t1 + (32 - C.JSNumber_methods.$mod(t2, 32))) / 32), H.checkNum(this.displayY));
          t1 = this.displayX;
          if (typeof t1 !== "number")
            return t1.$mul();
          t2 = this.displayPxX;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 * 32 > t2)
            this.displayX = Math.min(C.JSDouble_methods.floor$0((t1 + (32 - C.JSNumber_methods.$mod(t2, 32))) / 32), H.checkNum(this.displayX));
          t1 = this.displayY;
          if (typeof t1 !== "number")
            return t1.$mul();
          t2 = this.displayPxY;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 * 32 < t2)
            this.displayY = Math.max(C.JSDouble_methods.floor$0((t2 + (32 - C.JSNumber_methods.$mod(t2, 32))) / 32), H.checkNum(this.displayY)) - 1;
          t1 = this.displayX;
          if (typeof t1 !== "number")
            return t1.$mul();
          t2 = this.displayPxY;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 * 32 < t2) {
            t1 = this.displayPxX;
            if (typeof t1 !== "number")
              return t1.$mod();
            this.displayX = Math.max(C.JSDouble_methods.floor$0((t1 + (32 - C.JSNumber_methods.$mod(t1, 32))) / 32), H.checkNum(this.displayX)) - 1;
          }
        }
        this.gameMap.update$0();
        this.player.update$0();
        this.updateEntities$0();
        this.updateCharacters$0();
        this.updateAnimations$0();
        this.updateParticles$0();
        this.updateEvents$0();
        this.updateProjectiles$0();
      },
      updateEntities$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, entitiesIterator;
        var $async$updateEntities$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.entities;
                entitiesIterator = new J.ArrayIterator(t1, t1.length, 0, null);
                for (; entitiesIterator.moveNext$0();)
                  entitiesIterator.__interceptors$_current.update$0();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$updateEntities$0, $async$completer);
      },
      updateEvents$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, eventIterator;
        var $async$updateEvents$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.events;
                eventIterator = new J.ArrayIterator(t1, t1.length, 0, null);
                for (; eventIterator.moveNext$0();)
                  eventIterator.__interceptors$_current.update$0();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$updateEvents$0, $async$completer);
      },
      updateCharacters$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, characters;
        var $async$updateCharacters$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.actors;
                characters = new J.ArrayIterator(t1, t1.length, 0, null);
                for (; characters.moveNext$0();)
                  characters.__interceptors$_current.update$0();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$updateCharacters$0, $async$completer);
      },
      updateParticles$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, particlesIterator;
        var $async$updateParticles$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.particles;
                particlesIterator = new J.ArrayIterator(t1, t1.length, 0, null);
                for (; particlesIterator.moveNext$0();)
                  particlesIterator.__interceptors$_current.update$0();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$updateParticles$0, $async$completer);
      },
      updateAnimations$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, animationsIterator;
        var $async$updateAnimations$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.activeAnimations;
                animationsIterator = new J.ArrayIterator(t1, t1.length, 0, null);
                for (; animationsIterator.moveNext$0();)
                  animationsIterator.__interceptors$_current.update$0();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$updateAnimations$0, $async$completer);
      },
      updateProjectiles$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, projectileIterator;
        var $async$updateProjectiles$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.projectiles;
                projectileIterator = new J.ArrayIterator(t1, t1.length, 0, null);
                for (; projectileIterator.moveNext$0();)
                  projectileIterator.__interceptors$_current.update$0();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$updateProjectiles$0, $async$completer);
      },
      inCamera$1: function(coord) {
        var t1, t2, t3;
        t1 = coord.x;
        t2 = this.displayPxX;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (J.$ge$n(t1, t2 - 32)) {
          t1 = coord.y;
          t2 = this.displayPxY;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (J.$ge$n(t1, t2 - 32)) {
            t1 = coord.x;
            t2 = this.displayPxX;
            t3 = J.get$width$x(this.canvas);
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (J.$lt$n(t1, t2 + t3 + 32)) {
              t1 = coord.y;
              t2 = this.displayPxY;
              t3 = J.get$height$x(this.canvas);
              if (typeof t2 !== "number")
                return t2.$add();
              if (typeof t3 !== "number")
                return H.iae(t3);
              t3 = J.$lt$n(t1, t2 + t3 + 32);
              t1 = t3;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1)
          return true;
        return false;
      },
      updateCameraMovement$0: function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, distance, t2, t3, t4;
        var $async$updateCameraMovement$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.player.speed;
                if (typeof t1 !== "number") {
                  $async$returnValue = H.iae(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                distance = 2 * t1;
                t1 = $async$self.displayY;
                if (typeof t1 !== "number") {
                  $async$returnValue = t1.$mul();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 *= 32;
                t2 = $async$self.displayPxY;
                if (typeof t2 !== "number") {
                  $async$returnValue = H.iae(t2);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (t1 > t2) {
                  t2 = Math.min(t2 + distance, t1);
                  $async$self.displayPxY = t2;
                }
                t3 = $async$self.displayX;
                if (typeof t3 !== "number") {
                  $async$returnValue = t3.$mul();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t3 *= 32;
                t4 = $async$self.displayPxX;
                if (typeof t4 !== "number") {
                  $async$returnValue = H.iae(t4);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (t3 > t4) {
                  t4 = Math.min(t4 + distance, t3);
                  $async$self.displayPxX = t4;
                }
                if (t1 < t2)
                  $async$self.displayPxY = Math.max(t2 - distance, t1);
                if (t3 < t4)
                  $async$self.displayPxX = Math.max(t4 - distance, t3);
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStart($async$updateCameraMovement$0, $async$completer);
      },
      move$1: function(direction) {
        var t1, t2, t3;
        switch (direction) {
          case 0:
            this.player.move$1(0);
            t1 = this.player.curPos.y;
            t2 = J.get$height$x(this.canvas);
            if (typeof t2 !== "number")
              return t2.$div();
            if (J.$gt$n(t1, C.JSDouble_methods.floor$0(t2 / 64))) {
              t1 = this.player.curPos.y;
              t2 = this.gameMap.height;
              t3 = this.displayY;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (J.$lt$n(t1, t2 - t3)) {
                t1 = this.player.curPos.y;
                t2 = this.gameMap.height;
                t3 = J.get$height$x(this.canvas);
                if (typeof t3 !== "number")
                  return t3.$div();
                t3 = J.$lt$n(t1, t2 - C.JSDouble_methods.floor$0(t3 / 64));
                t1 = t3;
              } else
                t1 = false;
            } else
              t1 = false;
            if (t1)
              this.centerCamera$1(1);
            break;
          case 1:
            this.player.move$1(1);
            t1 = this.player.curPos.y;
            t2 = J.get$height$x(this.canvas);
            if (typeof t2 !== "number")
              return t2.$div();
            if (J.$gt$n(t1, C.JSDouble_methods.floor$0(t2 / 64))) {
              t1 = this.player.curPos.y;
              t2 = this.gameMap.height;
              t3 = this.displayY;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (J.$lt$n(t1, t2 - t3)) {
                t1 = this.player.curPos.y;
                t2 = this.gameMap.height;
                t3 = J.get$height$x(this.canvas);
                if (typeof t3 !== "number")
                  return t3.$div();
                t3 = J.$lt$n(t1, t2 - C.JSDouble_methods.floor$0(t3 / 64));
                t1 = t3;
              } else
                t1 = false;
            } else
              t1 = false;
            if (t1)
              this.centerCamera$1(1);
            break;
          case 2:
            this.player.move$1(2);
            t1 = this.player.curPos.x;
            t2 = J.get$width$x(this.canvas);
            t3 = this.displayX;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (J.$lt$n(t1, t2 - t3)) {
              t1 = this.player.curPos.x;
              t2 = this.gameMap.width;
              t3 = J.get$width$x(this.canvas);
              if (typeof t3 !== "number")
                return t3.$div();
              t3 = J.$lt$n(t1, t2 - C.JSDouble_methods.floor$0(t3 / 64));
              t1 = t3;
            } else
              t1 = false;
            if (t1)
              this.centerCamera$1(2);
            break;
          case 3:
            this.player.move$1(3);
            t1 = this.player.curPos.x;
            t2 = J.get$width$x(this.canvas);
            t3 = this.displayX;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (J.$lt$n(t1, t2 - t3)) {
              t1 = this.player.curPos.x;
              t2 = this.gameMap.width;
              t3 = J.get$width$x(this.canvas);
              if (typeof t3 !== "number")
                return t3.$div();
              t3 = J.$lt$n(t1, t2 - C.JSDouble_methods.floor$0(t3 / 64));
              t1 = t3;
            } else
              t1 = false;
            if (t1)
              this.centerCamera$1(2);
            break;
        }
      },
      centerCamera$1: function(type) {
        var t1, t2;
        t1 = this.player;
        t2 = this.canvas;
        if (type === 2) {
          t1 = t1.curPos.x;
          t2 = J.get$width$x(t2);
          if (typeof t2 !== "number")
            return t2.$div();
          this.displayX = Math.max(Math.min(H.checkNum(J.$sub$n(t1, C.JSDouble_methods.floor$0(t2 / 64))), 70), 0);
        } else {
          t1 = t1.curPos.y;
          t2 = J.get$height$x(t2);
          if (typeof t2 !== "number")
            return t2.$div();
          this.displayY = Math.max(Math.min(H.checkNum(J.$sub$n(t1, C.JSDouble_methods.floor$0(t2 / 64))), 34), 0);
        }
      },
      loadProperties$0: function() {
        W.HttpRequest_getString("data/characters.json", null, null).then$1(this.get$loadCharacters());
        W.HttpRequest_getString("data/structures.json", null, null).then$1(this.get$loadBuildings());
        W.HttpRequest_getString("data/entities.json", null, null).then$1(this.get$loadEntities());
      },
      loadEntities$1: [function(responseText) {
        var iteEntities, i, t1, t2, t3, coords, t4, tile, item;
        iteEntities = J.get$iterator$ax(J.$index$asx(C.JsonCodec_null_null.decode$1(responseText), "entities"));
        for (; iteEntities.moveNext$0();) {
          i = iteEntities.get$current();
          t1 = J.getInterceptor$asx(i);
          t2 = t1.$index(i, "x");
          t3 = t1.$index(i, "y");
          coords = new L.Coordinate(null, null);
          coords.x = t2;
          coords.y = t3;
          t3 = t1.$index(i, "xTile");
          t4 = t1.$index(i, "yTile");
          tile = new K.Tile(null, null, null, null, null);
          tile.xImg = J.$mul$ns(t3, 32);
          tile.yImg = J.$mul$ns(t4, 32);
          tile.x = t3;
          tile.y = t4;
          tile.type = 0;
          item = new S.Entity(this.doc, this.ctx, this.canvas, null, 1, coords, null, tile, null, t1.$index(i, "pushable"), this);
          t2 = J.$mul$ns(t2, 32);
          t4 = J.$mul$ns(coords.y, 32);
          t3 = new L.Coordinate(null, null);
          t3.x = t2;
          t3.y = t4;
          item.curPosPx = t3;
          item.moving = false;
          item.loadGraphic$1("assets/tileset/tileset.png");
          this.entities.push(item);
          t3 = this.gameMap;
          t4 = t1.$index(i, "x");
          t1 = t1.$index(i, "y");
          t3 = t3.eventMapset.m;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          t4 = t3[t4];
          if (t1 >>> 0 !== t1 || t1 >= t4.length)
            return H.ioore(t4, t1);
          t4[t1] = item;
        }
      }, "call$1", "get$loadEntities", 2, 0, 4],
      loadCharacters$1: [function(responseText) {
        var characters, m, t1, t2, t3, coords, t4, t5, character;
        characters = J.get$iterator$ax(J.$index$asx(C.JsonCodec_null_null.decode$1(responseText), "characters"));
        for (; characters.moveNext$0();) {
          m = characters.get$current();
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "x");
          t3 = t1.$index(m, "y");
          coords = new L.Coordinate(null, null);
          coords.x = t2;
          coords.y = t3;
          t3 = t1.$index(m, "characterId");
          t2 = t1.$index(m, "characterRow");
          t4 = t1.$index(m, "imageSource");
          t5 = t1.$index(m, "speed");
          character = new E.Actor(null, null, null, null, null, null, null, null, null, null, null, null, "hp_pixel.png", "mp_pixel.png", null, null, null, null, coords, null, null, null, null, null, null, null, null, t5, null, null, null, this, null, null);
          character.Character$6(coords, t3, t2, this, t4, t5);
          character.initializeActor$7(t1.$index(m, "combatable"), t1.$index(m, "behaviour"), t1.$index(m, "life"), t1.$index(m, "energy"), t1.$index(m, "message"), t1.$index(m, "attack"), t1.$index(m, "defense"));
          if (t1.$index(m, "moveRandom") === true)
            character.moveRandom$0();
          this.actors.push(character);
          t2 = this.gameMap;
          t3 = t1.$index(m, "x");
          t1 = t1.$index(m, "y");
          t2 = t2.eventMapset.m;
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t3 = t2[t3];
          if (t1 >>> 0 !== t1 || t1 >= t3.length)
            return H.ioore(t3, t1);
          t3[t1] = character;
        }
      }, "call$1", "get$loadCharacters", 2, 0, 4],
      loadBuildings$1: [function(responseText) {
        this.gameMap.structuresData = C.JsonCodec_null_null.decode$1(responseText);
        this.gameMap.addBuilding$3(0, 6, 5);
        this.gameMap.addRandomDetails$0();
      }, "call$1", "get$loadBuildings", 2, 0, 4],
      createMessage$1: function(char) {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1, t2, t3, t4, msg, $event;
        var $async$createMessage$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.ctx;
                t2 = char.message;
                t3 = char.screenPosPx;
                t4 = t3.x;
                t3 = t3.y;
                msg = new E.Message(null, null, null, null, null, null, null);
                msg._message$_ctx = t1;
                msg.text = t2;
                msg.x = t4;
                msg.y = t3;
                msg.maxWidth = 100;
                msg.lineHeight = 20;
                msg.duration = 10;
                msg.wrapText$0();
                P.Timer_Timer(C.Duration_5000000, $async$self.get$removeEvent());
                $event = new O.Action(null, null, null);
                $event.object = char;
                $event.event = msg;
                $event.type = 0;
                $async$self.events.push($event);
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$createMessage$1, $async$completer);
      },
      createAnimation$1: function(char) {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, coords, animation, $event;
        var $async$createAnimation$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                coords = new L.Coordinate(null, null);
                coords.x = 0;
                coords.y = 0;
                animation = V.MapAnimation$($async$self, coords, "light_001");
                $event = new O.Action(null, null, null);
                $event.object = char;
                $event.event = animation;
                $event.type = 1;
                $async$self.events.push($event);
                animation.startAnimation$0();
                P.Timer_Timer(C.Duration_500000, $async$self.get$removeEvent());
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$createAnimation$1, $async$completer);
      },
      removeEvent$0: [function() {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$returnValue, $async$self = this, t1, $event, t2;
        var $async$removeEvent$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.events;
                if (0 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 0);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $event = t1[0];
                if ($event.type === 0)
                  $event.object.trigger = false;
                (t1 && C.JSArray_methods).checkGrowable$1(t1, "removeAt");
                t2 = t1.length;
                if (0 >= t2)
                  H.throwExpression(P.RangeError$value(0, null, null));
                t1.splice(0, 1)[0];
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStart($async$removeEvent$0, $async$completer);
      }, "call$0", "get$removeEvent", 0, 0, 3],
      removeProjectile$1: function(projectile) {
        var $async$goto = 0, $async$completer = P.Completer_Completer$sync(), $async$self = this, t1;
        var $async$removeProjectile$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.projectiles;
                (t1 && C.JSArray_methods).remove$1(t1, projectile);
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStart($async$removeProjectile$1, $async$completer);
      },
      shallPass$2: function(face, character) {
        var t1, t2, facingCoords;
        if (face === 0 && J.$ge$n(character.get$curPos().y, 1)) {
          t1 = character.get$curPos().x;
          t2 = J.$sub$n(character.get$curPos().y, 1);
          facingCoords = new L.Coordinate(null, null);
          facingCoords.x = t1;
          facingCoords.y = t2;
        } else if (face === 1 && J.$lt$n(character.get$curPos().y, this.gameMap.eventMapset.rows - 1)) {
          t1 = character.get$curPos().x;
          t2 = J.$add$ns(character.get$curPos().y, 1);
          facingCoords = new L.Coordinate(null, null);
          facingCoords.x = t1;
          facingCoords.y = t2;
        } else if (face === 2 && J.$ge$n(character.get$curPos().x, 1)) {
          t1 = J.$sub$n(character.get$curPos().x, 1);
          t2 = character.get$curPos().y;
          facingCoords = new L.Coordinate(null, null);
          facingCoords.x = t1;
          facingCoords.y = t2;
        } else if (face === 3 && J.$lt$n(character.get$curPos().x, this.gameMap.eventMapset.cols - 1)) {
          t1 = J.$add$ns(character.get$curPos().x, 1);
          t2 = character.get$curPos().y;
          facingCoords = new L.Coordinate(null, null);
          facingCoords.x = t1;
          facingCoords.y = t2;
        } else
          return false;
        return this.objectIsPassable$3(character, facingCoords, face);
      },
      objectIsPassable$3: function(character, facingCoords, face) {
        var t1, t2, t3, tileObject, nextTo;
        t1 = this.gameMap.eventMapset;
        t2 = facingCoords.x;
        t3 = facingCoords.y;
        t1 = t1.m;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        tileObject = t2[t3];
        if (tileObject !== character && tileObject != null) {
          t1 = J.getInterceptor(tileObject);
          if (!!t1.$isActor && true)
            return false;
          else if (!!t1.$isTile)
            return false;
          else {
            t1 = !!t1.$isEntity;
            if (t1 && tileObject.pushable !== true)
              return false;
            else if (t1 && tileObject.pushable === true)
              if (tileObject.move$1(face) !== true)
                return false;
          }
        }
        t1 = this.player;
        if (character !== t1) {
          nextTo = t1.curPos.nextToThis2$1(facingCoords);
          this.player.phasable;
          if (nextTo)
            return false;
        }
        return true;
      },
      getCharacterInFront$0: function() {
        var t1, characters, char, charFace;
        t1 = this.actors;
        characters = new J.ArrayIterator(t1, t1.length, 0, null);
        for (; characters.moveNext$0();) {
          char = characters.__interceptors$_current;
          charFace = char.get$curPosPx().facingThis$2(this.player.getCurrentDirection$0(), this.player.curPosPx);
          if (charFace >= 0) {
            char.faceDirection$1(charFace);
            return char;
          }
        }
        return;
      }
    }
  }], ["tile", "core/tile.dart",, K, {
    "^": "",
    Tile: {
      "^": "Object;xImg<,yImg,type>,x*,y*"
    }
  }], ["windowset", "core/windowset.dart",, R, {
    "^": "",
    WindowSet: {
      "^": "Object;_doc,_ctx,canvas,windowImage,curPos,width,height>,text,startLine,endOfLine",
      update$0: function() {
        var t1, t2, y, x, t3, t4, t5, t6;
        t1 = this._ctx;
        J.getInterceptor$x(t1).save$0(t1);
        t1.globalAlpha = 0.7;
        t1.drawImage(this.windowImage, 0, 0, 64, 64, J.$add$ns(this.curPos.x, 9), J.$add$ns(this.curPos.y, 9), this.width - 18, this.height - 18);
        t2 = this.curPos;
        y = t2.y;
        for (x = t2.x, t2 = [null], t3 = J.getInterceptor$ns(y); t4 = J.getInterceptor$n(x), t4.$le(x, this.width * 1.5); x = t4.$add(x, 64)) {
          t5 = this.windowImage;
          C.CanvasRenderingContext2D_methods.drawImageToRect$3$sourceRect(t1, t5, new P.Rectangle(x, y, 64, 64, t2), new P.Rectangle(0, 64, 64, 64, t2));
          t5 = this.windowImage;
          t6 = t3.$add(y, 64);
          C.CanvasRenderingContext2D_methods.drawImageToRect$3$sourceRect(t1, t5, new P.Rectangle(x, t6, 64, 64, t2), new P.Rectangle(0, 64, 64, 64, t2));
        }
        t1.restore();
        t2 = this.windowImage;
        t3 = this.curPos;
        C.CanvasRenderingContext2D_methods.drawImageToRect$3$sourceRect(t1, t2, P.Rectangle$(t3.x, t3.y, 9, 9, null), P.Rectangle$(64, 0, 9, 9, null));
        C.CanvasRenderingContext2D_methods.drawImageToRect$3$sourceRect(t1, this.windowImage, P.Rectangle$(J.$sub$n(J.$add$ns(this.curPos.x, this.width), 8), this.curPos.y, 10, 9, null), P.Rectangle$(121, 0, 9, 9, null));
        t3 = this.windowImage;
        t2 = this.curPos;
        C.CanvasRenderingContext2D_methods.drawImageToRect$3$sourceRect(t1, t3, P.Rectangle$(t2.x, J.$sub$n(J.$add$ns(t2.y, this.height), 8), 9, 9, null), P.Rectangle$(64, 57, 9, 9, null));
        C.CanvasRenderingContext2D_methods.drawImageToRect$3$sourceRect(t1, this.windowImage, P.Rectangle$(J.$sub$n(J.$add$ns(this.curPos.x, this.width), 9), J.$sub$n(J.$add$ns(this.curPos.y, this.height), 8), 10, 9, null), P.Rectangle$(121, 57, 9, 9, null));
        t1.drawImage(this.windowImage, 73, 0, 9, 9, J.$add$ns(this.curPos.x, 9), this.curPos.y, this.width - 18 + 1, 9);
        t1.drawImage(this.windowImage, 73, 0, 9, 9, J.$add$ns(this.curPos.x, 9), J.$sub$n(J.$add$ns(this.curPos.y, this.height), 9), this.width - 18, 9);
        t2 = this.windowImage;
        t3 = this.curPos;
        t1.drawImage(t2, 64, 9, 9, 9, t3.x, J.$add$ns(t3.y, 9), 9, this.height - 18 + 1);
        t1.drawImage(this.windowImage, 64, 9, 9, 9, J.$sub$n(J.$add$ns(this.curPos.x, this.width), 9), J.$add$ns(this.curPos.y, 9), 9, this.height - 18 + 1);
        this.drawText$0();
      },
      drawText$0: function() {
        var x, y, t1, words, line, numLines, n, testLine, t2, t3;
        x = J.$add$ns(this.curPos.x, 20);
        y = J.$add$ns(J.$add$ns(this.curPos.y, 20), 15);
        t1 = this._ctx;
        J.getInterceptor$x(t1).save$0(t1);
        t1.font = "16pt Verdana";
        t1.fillStyle = "white";
        t1.lineWidth = 3;
        t1.shadowOffsetX = 0;
        t1.shadowOffsetY = 0;
        t1.shadowBlur = 5;
        t1.shadowColor = "rgba(0, 0, 0, 1)";
        words = this.text.split(" ");
        for (line = "", numLines = 0, n = 0; n < words.length; ++n) {
          testLine = line + H.S(words[n]) + " ";
          t2 = t1.measureText(testLine).width;
          t3 = this.width;
          if (typeof t2 !== "number")
            return t2.$gt();
          if (!(t2 > t3 - 40)) {
            if (n >= words.length)
              return H.ioore(words, n);
            t2 = J.$eq$(words[n], "\n");
          } else
            t2 = true;
          if (t2) {
            if (numLines >= this.startLine) {
              C.CanvasRenderingContext2D_methods.fillText$3(t1, line, x, y);
              y = J.$add$ns(y, 30);
            }
            if (n >= words.length)
              return H.ioore(words, n);
            if (J.$eq$(words[n], "\n"))
              line = "";
            else {
              if (n >= words.length)
                return H.ioore(words, n);
              line = H.S(words[n]) + " ";
            }
            ++numLines;
          } else
            line = testLine;
          if (line !== " " && n === words.length - 1)
            C.CanvasRenderingContext2D_methods.fillText$3(t1, line, x, y);
          if (numLines >= this.startLine + 3) {
            t1.drawImage(this.windowImage, 96, 65, 17, 16, J.$sub$n(J.$add$ns(this.curPos.x, this.width / 2), 25), J.$sub$n(J.$add$ns(this.curPos.y, this.height), 25), 20, 20);
            break;
          }
        }
        if (numLines < this.startLine)
          this.endOfLine = true;
        t1.restore();
      },
      loadGraphic$1: function(src) {
        var t1;
        this.windowImage = W._ElementFactoryProvider_createElement_tag("img", null);
        t1 = this._doc;
        t1.toString;
        t1 = t1.createElement("img");
        this.windowImage = t1;
        J.set$src$x(t1, src);
        t1 = J.get$onLoad$x(this.windowImage);
        W._EventStreamSubscription$(t1._html$_target, t1._eventType, new R.WindowSet_loadGraphic_closure(this), false, H.getTypeArgumentByIndex(t1, 0));
      }
    },
    WindowSet_loadGraphic_closure: {
      "^": "Closure:1;$this",
      call$1: function(value) {
        return this.$this.update$0();
      }
    }
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$fillStyle$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
  };
  J.set$globalAlpha$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
  };
  J.set$globalCompositeOperation$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$globalCompositeOperation(receiver, value);
  };
  J.set$height$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$height(receiver, value);
  };
  J.set$src$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$src(receiver, value);
  };
  J.set$width$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$width(receiver, value);
  };
  J.get$classes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$classes(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$height$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$height(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$keyCode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$keyCode(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$onKeyDown$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onKeyDown(receiver);
  };
  J.get$onKeyUp$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onKeyUp(receiver);
  };
  J.get$onLoad$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onLoad(receiver);
  };
  J.get$responseText$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$responseText(receiver);
  };
  J.get$type$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$type(receiver);
  };
  J.get$width$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$width(receiver);
  };
  J.get$y$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$y(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$mul$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver * a0;
    return J.getInterceptor$ns(receiver).$mul(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J._addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
  };
  J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
  };
  J.abs$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).abs$0(receiver);
  };
  J.ceil$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).ceil$0(receiver);
  };
  J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
    return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
  };
  J.complete$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).complete$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
    return J.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
  };
  J.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
    return J.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
  };
  J.drawImageToRect$3$sourceRect$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).drawImageToRect$3$sourceRect(receiver, a0, a1, a2);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.fillText$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
  };
  J.floor$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).floor$0(receiver);
  };
  J.focus$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).focus$0(receiver);
  };
  J.getContext$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.measureText$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).measureText$1(receiver, a0);
  };
  J.restore$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).restore$0(receiver);
  };
  J.round$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).round$0(receiver);
  };
  J.save$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).save$0(receiver);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.strokeText$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).strokeText$3(receiver, a0, a1, a2);
  };
  J.toInt$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  // Output contains no constant list.
  var $ = Isolate.$isolateProperties;
  C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Window_methods = W.Window.prototype;
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__JSRandom = new P._JSRandom();
  C.C__RootZone = new P._RootZone();
  C.Duration_0 = new P.Duration(0);
  C.Duration_100000 = new P.Duration(100000);
  C.Duration_2000000 = new P.Duration(2000000);
  C.Duration_500000 = new P.Duration(500000);
  C.Duration_5000000 = new P.Duration(5000000);
  C.Duration_60000 = new P.Duration(60000);
  C.JS_CONST_4IJ = function() {  var toStringFunction = Object.prototype.toString;  function getTag(o) {    var s = toStringFunction.call(o);    return s.substring(8, s.length - 1);  }  function getUnknownTag(object, tag) {    if (/^HTML[A-Z].*Element$/.test(tag)) {      var name = toStringFunction.call(object);      if (name == "[object Object]") return null;      return "HTMLElement";    }  }  function getUnknownTagGenericBrowser(object, tag) {    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";    return getUnknownTag(object, tag);  }  function prototypeForTag(tag) {    if (typeof window == "undefined") return null;    if (typeof window[tag] == "undefined") return null;    var constructor = window[tag];    if (typeof constructor != "function") return null;    return constructor.prototype;  }  function discriminator(tag) { return null; }  var isBrowser = typeof navigator == "object";  return {    getTag: getTag,    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,    prototypeForTag: prototypeForTag,    discriminator: discriminator };};
  C.JS_CONST_AgZ = function(hooks) { return hooks; };
  C.JS_CONST_EKH = function(hooks) {  if (typeof dartExperimentalFixupGetTag != "function") return hooks;  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);};
  C.JS_CONST_EyN = function(hooks) {  var getTag = hooks.getTag;  var prototypeForTag = hooks.prototypeForTag;  function getTagFixed(o) {    var tag = getTag(o);    if (tag == "Document") {      // "Document", so we check for the xmlVersion property, which is the empty      if (!!o.xmlVersion) return "!Document";      return "!HTMLDocument";    }    return tag;  }  function prototypeForTagFixed(tag) {    if (tag == "Document") return null;    return prototypeForTag(tag);  }  hooks.getTag = getTagFixed;  hooks.prototypeForTag = prototypeForTagFixed;};
  C.JS_CONST_LlX = function(hooks) {  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";  if (userAgent.indexOf("Firefox") == -1) return hooks;  var getTag = hooks.getTag;  var quickMap = {    "BeforeUnloadEvent": "Event",    "DataTransfer": "Clipboard",    "GeoGeolocation": "Geolocation",    "Location": "!Location",    "WorkerMessageEvent": "MessageEvent",    "XMLDocument": "!Document"};  function getTagFirefox(o) {    var tag = getTag(o);    return quickMap[tag] || tag;  }  hooks.getTag = getTagFirefox;};
  C.JS_CONST_TSE = function getTagFallback(o) {  var s = Object.prototype.toString.call(o);  return s.substring(8, s.length - 1);};
  C.JS_CONST_c0o = function(hooks) {  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";  if (userAgent.indexOf("Trident/") == -1) return hooks;  var getTag = hooks.getTag;  var quickMap = {    "BeforeUnloadEvent": "Event",    "DataTransfer": "Clipboard",    "HTMLDDElement": "HTMLElement",    "HTMLDTElement": "HTMLElement",    "HTMLPhraseElement": "HTMLElement",    "Position": "Geoposition"  };  function getTagIE(o) {    var tag = getTag(o);    var newTag = quickMap[tag];    if (newTag) return newTag;    if (tag == "Object") {      if (window.DataView && (o instanceof window.DataView)) return "DataView";    }    return tag;  }  function prototypeForTagIE(tag) {    var constructor = window[tag];    if (constructor == null) return null;    return constructor.prototype;  }  hooks.getTag = getTagIE;  hooks.prototypeForTag = prototypeForTagIE;};
  C.JS_CONST_nuk = function(getTagFallback) {  return function(hooks) {    if (typeof navigator != "object") return hooks;    var ua = navigator.userAgent;    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;    if (ua.indexOf("Chrome") >= 0) {      function confirm(p) {        return typeof window == "object" && window[p] && window[p].name == p;      }      if (confirm("Window") && confirm("HTMLElement")) return hooks;    }    hooks.getTag = getTagFallback;  };};
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Expando__keyCount = 0;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__cachedCssPrefix = null;
  $._doc = null;
  $._ctx = null;
  $.canvas = null;
  $.scene = null;
  $.windowInfo = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_thisScript", "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", function() {
    if (typeof WeakMap == "function")
      var t1 = new WeakMap();
    else {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      t1 = "expando$key$" + t1;
    }
    return new P.Expando(null, t1);
  }, "IsolateNatives_workerIds", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__nullFuture", "$get$Future__nullFuture", function() {
    var t1, t2;
    t1 = P.Null;
    t2 = new P._Future(0, P.Zone_current(), null, [t1]);
    t2._Future$value$1(null, t1);
    return t2;
  }, "Future__nullFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", function() {
    return P.RegExp_RegExp("^\\S+$", true, false);
  }, "CssClassSetImpl__validTokenRE"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [null];
  init.types = [{func: 1}, {func: 1, args: [,]}, {func: 1, v: true}, {func: 1, ret: P.Future}, {func: 1, v: true, args: [P.String]}, {func: 1, v: true, args: [{func: 1, v: true}]}, {func: 1, v: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, args: [, P.String]}, {func: 1, args: [P.String]}, {func: 1, args: [{func: 1, v: true}]}, {func: 1, args: [, P.StackTrace]}, {func: 1, args: [P.int,,]}, {func: 1, args: [,], opt: [,]}, {func: 1, v: true, args: [, P.StackTrace]}, {func: 1, args: [,,]}, {func: 1, args: [W.HttpRequest]}, {func: 1, v: true, args: [P.num]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(B.gameengine__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(B.gameengine__main$closure(), a);
      })([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL==gameengine.dart.js.map
